mising_value <- function(data_p, nx){
pr_names<-c("y")
for(i in 2:ncol(data_p)) pr_names<-c(pr_names, paste("x", i-1, sep=""))
colnames(data_p)<-pr_names
f<-paste(pr_names[1], "~", sep="")
for(i in 2:length(pr_names)) f<-paste(f, "+", pr_names[i], sep="")
f<-as.formula(f)
fit <- lm(f, data=data_p)
newdata=data.frame(x=nx[1])
for(i in 2:length(nx)) newdata<-cbind(newdata, c(nx[i]))
colnames(newdata)<-pr_names[2:length(pr_names)]
predict(fit, newdata)[[1]]
}
pop <- model_fl[,1]
data <- model_fl[,-c(1)]
data_rep <- data
for (i in 1:ncol(data)) {
for (j in 1:nrow(data)) {
if (is.na(data[j, i])) {
yd <- data[, i]
nx <- as.numeric(data[j, ])
nx <- nx[!is.na(nx)]
na_index <- which(!is.na(data[j, , drop = FALSE]))
data_p <- data[, na_index]
data_p <- cbind(y = yd, data_p)
data_p <- data_p[rowSums(is.na(data_p)) == 0, ]
data_rep[j,i] <- mising_value(data_p, nx)
}
}
}
data_rep<-cbind(pop=pop, data_rep)
data<-data_rep
row_n<-data.frame(point=data[,1])
data<-data[,-1]
data_am<-data.frame(dep=data[,12], point=row_n)
fit <- aov(dep ~ point, data=data_am)
summary(fit)
summary(data)
pop <- model_fr[,1]
data <- model_fr[,-c(1)]
data_rep <- data
for (i in 1:ncol(data)) {
for (j in 1:nrow(data)) {
if (is.na(data[j, i])) {
yd <- data[, i]
nx <- as.numeric(data[j, ])
nx <- nx[!is.na(nx)]
na_index <- which(!is.na(data[j, , drop = FALSE]))
data_p <- data[, na_index]
data_p <- cbind(y = yd, data_p)
data_p <- data_p[rowSums(is.na(data_p)) == 0, ]
data_rep[j,i] <- mising_value(data_p, nx)
}
}
}
data_rep<-cbind(pop=pop, data_rep)
data<-data_rep
row_n<-data.frame(point=data[,1])
data<-data[,-1]
data_am<-data.frame(dep=data[,12], point=row_n)
fit <- aov(dep ~ point, data=data_am)
summary(fit)
set.seed(123)
split = sample.split(combined_data$PHfl, SplitRatio = 0.5)
training_set <- subset(combined_data, split == TRUE)
test_set <- subset(combined_data, split == FALSE)
sapply( lapply(training_set, unique), length)
training_set <- training_set[, colSums(is.na(training_set)) != nrow(training_set)]
values_count <- sapply(lapply(training_set, unique), length)
regressor = lm.fit(formula = PHfl ~ ., data = training_set)
y_pred = predict(regressor, newdata = test_set)
# START -----------------------------------------------------------------------------------------------------------
Sys.setenv(LANG = "en_US.UTF-8")
#Library
library(pacman)
pacman::p_load(dplyr, factoextra, fastICA, ggplot2, ggpubr, NMF,  party, psych, randomForest,
reshape2, Rtsne, shipunov, tidyverse, tseries, umap, vegan)
#Empty Global Enviroment
rm(list = ls())
# START -----------------------------------------------------------------------------------------------------------
Sys.setenv(LANG = "en_US.UTF-8")
#Library
library(pacman)
pacman::p_load(lubridate, purrr, dplyr, tidyr, forecast, zoo, rlang, ggplot2, tidyverse, raster,
sp, geodata, terra, rasterVis, BiocManager, dismo, XML, jsonlite, rgdal, rJava,
readxl, rgbif, factoextra, NbClust, cluster, openxlsx, caret, mice, missForest, knitr, htmltools,
FactoMineR, missMDA, pcaMethods, caret, ggfortify, gridExtra, hrbrthemes, corrplot, mice,
caTools, vegan, pvclust
)
pacman::p_load(dplyr, factoextra, fastICA, ggplot2, ggpubr, NMF,  party, psych, randomForest,
reshape2, Rtsne, shipunov, tidyverse, tseries, umap, vegan)
#Empty Global Enviroment
rm(list = ls())
# Read all lists in file
file_path <- "E:/Eranthis/Eranthis_morph.xlsx"
all_sheets <- excel_sheets(file_path)
for (sheet_name in all_sheets) {
var_name <- make.names(sheet_name)
assign(var_name, read_excel(file_path, sheet = sheet_name))
}
all_dataframes <- list("E.sibirica", "E.tanhoensis", "E.sibirica_x_E.tanhoensis", "E.krasnoborovii", "E.sineli",
"E.stellata", "E.stellata.Korea.", "E.pinnatifida", "E.pungdoensis", "E.albiflora",
"E.lobulata", "E.byunsanensis")
#Making One table
tables <- lapply(all_dataframes, get)
tables <- lapply(tables, as.data.frame)
tables <- lapply(tables, function(tbl) mutate_all(tbl, as.character))
tables <- lapply(seq_along(all_dataframes), function(i) {
df <- get(all_dataframes[[i]])
df <- as.data.frame(mutate_all(df, as.character))
df <- df[complete.cases(df$Species), ]
df$Species <- all_dataframes[[i]]
return(df)
})
combined_data <- bind_rows(tables)
combined_data <- combined_data[, -c(1,3,34:44,48) ]
combined_data <- combined_data %>%
mutate_at(vars(2:34), ~as.numeric(.))
#1,3,15,17,19,23,29,30,31
model_fr <- combined_data[ , c(1,3,5,7,9,13,15,17,19,21,23,29,30,31,33,34)]
filter <- apply(model_fr[, -1], 1, function(row) !all(is.na(row)))
model_fr <- model_fr[filter, ]
model_fl <- combined_data[ , c(1,2,4,6,8,12,14,16,18,20,22,24,25,26,27,28,32)]
filter <- apply(model_fl[, -1], 1, function(row) !all(is.na(row)))
model_fl <- model_fl[filter, ]
mising_value <- function(data_p, nx){
pr_names<-c("y")
for(i in 2:ncol(data_p)) pr_names<-c(pr_names, paste("x", i-1, sep=""))
colnames(data_p)<-pr_names
f<-paste(pr_names[1], "~", sep="")
for(i in 2:length(pr_names)) f<-paste(f, "+", pr_names[i], sep="")
f<-as.formula(f)
fit <- lm(f, data=data_p)
newdata=data.frame(x=nx[1])
for(i in 2:length(nx)) newdata<-cbind(newdata, c(nx[i]))
colnames(newdata)<-pr_names[2:length(pr_names)]
predict(fit, newdata)[[1]]
}
pop <- model_fl[,1]
data <- model_fl[,-c(1)]
data_rep <- data
for (i in 1:ncol(data)) {
for (j in 1:nrow(data)) {
if (is.na(data[j, i])) {
yd <- data[, i]
nx <- as.numeric(data[j, ])
nx <- nx[!is.na(nx)]
na_index <- which(!is.na(data[j, , drop = FALSE]))
data_p <- data[, na_index]
data_p <- cbind(y = yd, data_p)
data_p <- data_p[rowSums(is.na(data_p)) == 0, ]
data_rep[j,i] <- mising_value(data_p, nx)
}
}
}
data_rep<-cbind(pop=pop, data_rep)
data<-data_rep
row_n<-data.frame(point=data[,1])
data<-data[,-1]
data_am<-data.frame(dep=data[,12], point=row_n)
fit <- aov(dep ~ point, data=data_am)
summary(fit)
a<-3.019
1-1/a
boxplot(dep ~ point, data=data_am)
for(i in 2:ncol(data)){
data[,i]<-(data[,i]-mean(data[,i]))/sd(data[,i])
}
fit<-prcomp(data[,2:12])
fviz_pca_biplot(fit, habillage=row_n[,1], addEllipses=T, pointsize = 6)
data_rep <- data_rep %>% rename(Species = pop)
res.pca <- PCA(data_rep, quali.sup = 1, graph = FALSE, ncp = 2)
res.pca
data_rep
fviz_pca_biplot(res.pca, label = "var", habillage = 1, col.var = "black",
addEllipses = TRUE, pointsize = 3, ellipse.level = 0.95,
mean.point = FALSE, ellipse.alpha = 0, repel = TRUE) +
scale_color_brewer(palette = "Set1") +
theme_minimal()
pacman::p_load(lubridate, purrr, dplyr, tidyr, forecast, zoo, rlang, ggplot2, tidyverse, raster,
sp, geodata, terra, rasterVis, BiocManager, dismo, XML, jsonlite, rgdal, rJava,
readxl, rgbif, factoextra, NbClust, cluster, openxlsx, caret, mice, missForest, knitr, htmltools,
FactoMineR, missMDA, pcaMethods, caret, ggfortify, gridExtra, hrbrthemes, corrplot, mice,
caTools, vegan, pvclust,SamplePCA
)
spca <- SamplePCA(t(data_rep))
pacman::p_load(lubridate, purrr, dplyr, tidyr, forecast, zoo, rlang, ggplot2, tidyverse, raster,
sp, geodata, terra, rasterVis, BiocManager, dismo, XML, jsonlite, rgdal, rJava,
readxl, rgbif, factoextra, NbClust, cluster, openxlsx, caret, mice, missForest, knitr, htmltools,
FactoMineR, missMDA, pcaMethods, caret, ggfortify, gridExtra, hrbrthemes, corrplot, mice,
caTools, vegan, pvclust, SamplePCA
)
install.packages(SamplePCA)
pacman::p_load(lubridate, purrr, dplyr, tidyr, forecast, zoo, rlang, ggplot2, tidyverse, raster,
sp, geodata, terra, rasterVis, BiocManager, dismo, XML, jsonlite, rgdal, rJava,
readxl, rgbif, factoextra, NbClust, cluster, openxlsx, caret, mice, missForest, knitr, htmltools,
FactoMineR, missMDA, pcaMethods, caret, ggfortify, gridExtra, hrbrthemes, corrplot, mice,
caTools, vegan, pvclust, installr
)
updateR()
# START -----------------------------------------------------------------------------------------------------------
Sys.setenv(LANG = "en_US.UTF-8")
#Library
library(pacman)
pacman::p_load(lubridate, purrr, dplyr, tidyr, forecast, zoo, rlang, ggplot2, tidyverse, raster,
sp, geodata, terra, rasterVis, BiocManager, dismo, XML, jsonlite, rgdal, rJava,
readxl, rgbif, factoextra, NbClust, cluster, openxlsx, caret, mice, missForest, knitr, htmltools,
FactoMineR, missMDA, pcaMethods, caret, ggfortify, gridExtra, hrbrthemes, corrplot, mice,
caTools, vegan, pvclust, installr
)
pacman::p_load(lubridate, purrr, dplyr, tidyr, forecast, zoo, rlang, ggplot2, tidyverse, raster,
sp, geodata, terra, rasterVis, BiocManager, dismo, XML, jsonlite, rgdal, rJava,
readxl, rgbif, factoextra, NbClust, cluster, openxlsx, caret, mice, missForest, knitr, htmltools,
FactoMineR, missMDA, pcaMethods, caret, ggfortify, gridExtra, hrbrthemes, corrplot, mice,
caTools, vegan, pvclust, SamplePCA
)
# START -----------------------------------------------------------------------------------------------------------
Sys.setenv(LANG = "en_US.UTF-8")
#Library
library(pacman)
pacman::p_load(lubridate, purrr, dplyr, tidyr, forecast, zoo, rlang, ggplot2, tidyverse, raster,
sp, geodata, terra, rasterVis, BiocManager, dismo, XML, jsonlite, rgdal, rJava,
readxl, rgbif, factoextra, NbClust, cluster, openxlsx, caret, mice, missForest, knitr, htmltools,
FactoMineR, missMDA, pcaMethods, caret, ggfortify, gridExtra, hrbrthemes, corrplot, mice,
caTools, vegan, pvclust, SamplePCA
)
pacman::p_load(lubridate, purrr, dplyr, tidyr, forecast, zoo, rlang, ggplot2, tidyverse, raster,
sp, geodata, terra, rasterVis, BiocManager, dismo, XML, jsonlite, rgdal, rJava,
readxl, rgbif, factoextra, NbClust, cluster, openxlsx, caret, mice, missForest, knitr, htmltools,
FactoMineR, missMDA, pcaMethods, caret, ggfortify, gridExtra, hrbrthemes, corrplot, mice,
caTools, vegan, pvclust, ClassDiscovery
)
spca <- SamplePCA(t(data_rep))
spca <- SamplePCA(data_rep)
data_rep <- na.omit(data_rep)
spca <- SamplePCA(data_rep)
# START -----------------------------------------------------------------------------------------------------------
Sys.setenv(LANG = "en_US.UTF-8")
#Library
library(pacman)
pacman::p_load(lubridate, purrr, dplyr, tidyr, forecast, zoo, rlang, ggplot2, tidyverse, raster,
sp, geodata, terra, rasterVis, BiocManager, dismo, XML, jsonlite, rgdal, rJava,
readxl, rgbif, factoextra, NbClust, cluster, openxlsx, caret, mice, missForest, knitr, htmltools,
FactoMineR, missMDA, pcaMethods, caret, ggfortify, gridExtra, hrbrthemes, corrplot, mice,
caTools, vegan, pvclust, ClassDiscovery
)
pacman::p_load(dplyr, factoextra, fastICA, ggplot2, ggpubr, NMF,  party, psych, randomForest,
reshape2, Rtsne, shipunov, tidyverse, tseries, umap, vegan)
#Empty Global Enviroment
rm(list = ls())
# Read all lists in file
file_path <- "E:/Eranthis/Eranthis_morph.xlsx"
all_sheets <- excel_sheets(file_path)
for (sheet_name in all_sheets) {
var_name <- make.names(sheet_name)
assign(var_name, read_excel(file_path, sheet = sheet_name))
}
#Making One table
tables <- lapply(all_dataframes, get)
tables <- lapply(tables, as.data.frame)
tables <- lapply(tables, function(tbl) mutate_all(tbl, as.character))
tables <- lapply(seq_along(all_dataframes), function(i) {
df <- get(all_dataframes[[i]])
df <- as.data.frame(mutate_all(df, as.character))
df <- df[complete.cases(df$Species), ]
df$Species <- all_dataframes[[i]]
return(df)
})
# START -----------------------------------------------------------------------------------------------------------
Sys.setenv(LANG = "en_US.UTF-8")
#Library
library(pacman)
pacman::p_load(lubridate, purrr, dplyr, tidyr, forecast, zoo, rlang, ggplot2, tidyverse, raster,
sp, geodata, terra, rasterVis, BiocManager, dismo, XML, jsonlite, rgdal, rJava,
readxl, rgbif, factoextra, NbClust, cluster, openxlsx, caret, mice, missForest, knitr, htmltools,
FactoMineR, missMDA, pcaMethods, caret, ggfortify, gridExtra, hrbrthemes, corrplot, mice,
caTools, vegan, pvclust, ClassDiscovery
)
# START -----------------------------------------------------------------------------------------------------------
Sys.setenv(LANG = "en_US.UTF-8")
#Library
library(pacman)
# START -----------------------------------------------------------------------------------------------------------
Sys.setenv(LANG = "en_US.UTF-8")
#Library
library(pacman)
pacman::p_load(lubridate, purrr, dplyr, tidyr, forecast, zoo, rlang, ggplot2, tidyverse, raster,
sp, geodata, terra, rasterVis, BiocManager, dismo, XML, jsonlite, rJava,
readxl, factoextra, NbClust, cluster, openxlsx, caret, mice, missForest, knitr, htmltools,
FactoMineR, missMDA, pcaMethods, caret, ggfortify, gridExtra, hrbrthemes, corrplot, caTools,
vegan, pvclust, ClassDiscovery
)
# rgdal, rgbif
pacman::p_load(dplyr, factoextra, fastICA, ggplot2, ggpubr, NMF,  party, psych, randomForest,
reshape2, Rtsne, shipunov, tidyverse, tseries, umap, vegan)
#Empty Global Enviroment
rm(list = ls())
# Read all lists in file
file_path <- "E:/Eranthis/Eranthis_morph.xlsx"
all_sheets <- excel_sheets(file_path)
for (sheet_name in all_sheets) {
var_name <- make.names(sheet_name)
assign(var_name, read_excel(file_path, sheet = sheet_name))
}
all_dataframes <- list("E.sibirica", "E.tanhoensis", "E.sibirica_x_E.tanhoensis", "E.krasnoborovii", "E.sineli",
"E.stellata", "E.stellata.Korea.", "E.pinnatifida", "E.pungdoensis", "E.albiflora",
"E.lobulata", "E.byunsanensis")
#Making One table
tables <- lapply(all_dataframes, get)
tables <- lapply(tables, as.data.frame)
tables <- lapply(tables, function(tbl) mutate_all(tbl, as.character))
tables <- lapply(seq_along(all_dataframes), function(i) {
df <- get(all_dataframes[[i]])
df <- as.data.frame(mutate_all(df, as.character))
df <- df[complete.cases(df$Species), ]
df$Species <- all_dataframes[[i]]
return(df)
})
combined_data <- bind_rows(tables)
combined_data <- combined_data[, -c(1,3,34:44,48) ]
combined_data <- combined_data %>%
mutate_at(vars(2:34), ~as.numeric(.))
#1,3,15,17,19,23,29,30,31
model_fr <- combined_data[ , c(1,3,5,7,9,13,15,17,19,21,23,29,30,31,33,34)]
filter <- apply(model_fr[, -1], 1, function(row) !all(is.na(row)))
model_fr <- model_fr[filter, ]
model_fl <- combined_data[ , c(1,2,4,6,8,12,14,16,18,20,22,24,25,26,27,28,32)]
filter <- apply(model_fl[, -1], 1, function(row) !all(is.na(row)))
model_fl <- model_fl[filter, ]
mising_value <- function(data_p, nx){
pr_names<-c("y")
for(i in 2:ncol(data_p)) pr_names<-c(pr_names, paste("x", i-1, sep=""))
colnames(data_p)<-pr_names
f<-paste(pr_names[1], "~", sep="")
for(i in 2:length(pr_names)) f<-paste(f, "+", pr_names[i], sep="")
f<-as.formula(f)
fit <- lm(f, data=data_p)
newdata=data.frame(x=nx[1])
for(i in 2:length(nx)) newdata<-cbind(newdata, c(nx[i]))
colnames(newdata)<-pr_names[2:length(pr_names)]
predict(fit, newdata)[[1]]
}
pop <- model_fl[,1]
data <- model_fl[,-c(1)]
data_rep <- data
for (i in 1:ncol(data)) {
for (j in 1:nrow(data)) {
if (is.na(data[j, i])) {
yd <- data[, i]
nx <- as.numeric(data[j, ])
nx <- nx[!is.na(nx)]
na_index <- which(!is.na(data[j, , drop = FALSE]))
data_p <- data[, na_index]
data_p <- cbind(y = yd, data_p)
data_p <- data_p[rowSums(is.na(data_p)) == 0, ]
data_rep[j,i] <- mising_value(data_p, nx)
}
}
}
data_rep<-cbind(pop=pop, data_rep)
data<-data_rep
data_rep <- data_rep %>% rename(Species = pop)
View(data_rep)
res.pca <- PCA(data_rep, quali.sup = 1, graph = FALSE, ncp = 2)
fviz_pca_biplot(res.pca, label = "var", habillage = 1, col.var = "black",
addEllipses = TRUE, pointsize = 3, ellipse.level = 0.95,
mean.point = FALSE, ellipse.alpha = 0, repel = TRUE) +
scale_color_brewer(palette = "Set1") +
theme_minimal()
summary(res.pca)
# Function to calculate the broken stick thresholds
broken_stick <- function(n) {
k <- 1:n
return(rev(cumsum(1/k)) / sum(1/k))
}
# Number of principal components
n_components <- length(res.pca$sdev)
# Eigenvalues (variances) of the principal components
eigenvalues <- res.pca$sdev^2
# Broken stick thresholds
broken_stick_values <- broken_stick(n_components)
# Create a data frame for comparison
comparison <- data.frame(
Component = 1:n_components,
Eigenvalue = eigenvalues,
BrokenStick = broken_stick_values
)
eigenvalues <- res.pca$sdev^2
length(eigenvalues)
broken_stick_values <- broken_stick(n_components)
length(broken_stick_values)
# Number of principal components
n_components <- length(res.pca$sdev)
# Eigenvalues (variances) of the principal components
eigenvalues <- res.pca$sdev^2
length(eigenvalues)
pca_sum <- summary(res.pca)
View(pca_sum)
View(res.pca)
pca_sum <- summary(res.pca[["eig"]])
View(res.pca)
summary(pca_sum)
pca_res <- prcomp(data_rep, scale = TRUE)
pca_res <- prcomp(data_rep, scale = TRUE)
summary(res.pca)$importance
summary(res.pca$importance)
pca_res <- prcomp(data_rep, scale = TRUE)
View(data_rep)
data<-data[,-1]
pca_res <- prcomp(data_rep, scale = TRUE)
pca_res <- prcomp(data_rep)
pca_res <- prcomp(data_rep, na.rm = TRUE)
pca_res <- prcomp(data_rep, scale = TRUE)
pca_res <- prcomp(data_rep, scale = FALSE)
fviz_eig(res.pca)
fviz_eig(res.pca)
fviz_screeplot(res.pca)
fviz_eig(res.pca, fviz_screeplot)
fviz_eig(res.pca, choice = "eigenvalue")
fviz_dend(res.pca)
fviz_cluster(res.pca)
get_pca(res.pca)
get_pca(res.pca)$contrib
fviz_pca(res.pca)
fviz_pca(res.pca)$contrib
fviz_contrib(res.pca)
fviz_pca_contrib(res.pca, choice = c("var", "ind"),
fviz_pca_contrib(res.pca, choice = c("var", "ind")
fviz_pca_contrib(res.pca, choice = c("var", "ind"))
fviz_pca_contrib(res.pca, choice = c("var"))
fviz_pca_contrib(res.pca, choice = c("ind"))
fviz_pca_contrib(res.pca, choice = c("var"))
get_pca(res.pca)$contrib
get_pca(res.pca)$contrib
fviz_pca_contrib(res.pca, choice = c("var"))
fviz_eig(res.pca)
res.pca$var
View(data_rep)
View(data_rep)
fviz_pca_contrib(res.pca, choice = c("var"))
fviz_pca_contrib(res.pca, choice = c("var"))
res.pca <- PCA(data_rep, quali.sup = 1, graph = FALSE, ncp = 5)
res.pca$var
res.pca$ind
res.pca$eig
View(E.byunsanensis)
# START -----------------------------------------------------------------------------------------------------------
Sys.setenv(LANG = "en_US.UTF-8")
#Library
library(pacman)
pacman::p_load(lubridate, purrr, dplyr, tidyr, forecast, zoo, rlang, ggplot2, tidyverse, raster,
sp, geodata, terra, rasterVis, BiocManager, dismo, XML, jsonlite, rJava,
readxl, factoextra, NbClust, cluster, openxlsx, caret, mice, missForest, knitr, htmltools,
FactoMineR, missMDA, pcaMethods, caret, ggfortify, gridExtra, hrbrthemes, corrplot, caTools,
vegan, pvclust, ClassDiscovery
)
# rgdal, rgbif
pacman::p_load(dplyr, factoextra, fastICA, ggplot2, ggpubr, NMF,  party, psych, randomForest,
reshape2, Rtsne, shipunov, tidyverse, tseries, umap, vegan)
#Empty Global Enviroment
rm(list = ls())
# Read all lists in file
file_path <- "E:/Eranthis/Eranthis_morph.xlsx"
all_sheets <- excel_sheets(file_path)
for (sheet_name in all_sheets) {
var_name <- make.names(sheet_name)
assign(var_name, read_excel(file_path, sheet = sheet_name))
}
dir.create("E:/Eranthis/maps")
all_dataframes <- list("E.sibirica", "E.tanhoensis", "E.sibirica_x_E.tanhoensis", "E.krasnoborovii", "E.sineli",
"E.stellata", "E.stellata.Korea.", "E.pinnatifida", "E.pungdoensis", "E.albiflora",
"E.lobulata", "E.byunsanensis")
#Making One table
tables <- lapply(all_dataframes, get)
tables <- lapply(tables, as.data.frame)
tables <- lapply(tables, function(tbl) mutate_all(tbl, as.character))
tables <- lapply(seq_along(all_dataframes), function(i) {
df <- get(all_dataframes[[i]])
df <- as.data.frame(mutate_all(df, as.character))
df <- df[complete.cases(df$Species), ]
df$Species <- all_dataframes[[i]]
return(df)
})
combined_data <- bind_rows(tables)
combined_data <- combined_data[, -c(1,3,34:44,48) ]
combined_data <- combined_data %>%
mutate_at(vars(2:34), ~as.numeric(.))
View(combined_data)
#1,3,15,17,19,23,29,30,31
model_fr <- combined_data[ , c(1,3,5,7,9,13,15,17,19,21,23,29,30,31,33,34)]
filter <- apply(model_fr[, -1], 1, function(row) !all(is.na(row)))
model_fr <- model_fr[filter, ]
model_fl <- combined_data[ , c(1,2,4,6,8,12,14,16,18,20,22,24,25,26,27,28,32)]
filter <- apply(model_fl[, -1], 1, function(row) !all(is.na(row)))
model_fl <- model_fl[filter, ]
model_fr_cc <- complete.cases(model_fr)
table(model_fr_cc)
model_fl_cc <- complete.cases(model_fl)
table(model_fl_cc)
res.pca <- PCA(model_fr, quali.sup = 1, graph = FALSE, ncp = 5)
model_fl <- na.omit(model_fl)
res.pca <- PCA(model_fr, quali.sup = 1, graph = FALSE, ncp = 5)
res.pca <- PCA(model_fl, quali.sup = 1, graph = FALSE, ncp = 5)
fviz_pca_biplot(res.pca, label = "var", habillage = 1, col.var = "black",
addEllipses = TRUE, pointsize = 3, ellipse.level = 0.95,
mean.point = FALSE, ellipse.alpha = 0, repel = TRUE) +
scale_color_brewer(palette = "Set1") +
theme_minimal()
res.pca$eig
fviz_eig(res.pca)
get_pca(res.pca)$contrib
fviz_pca_contrib(res.pca, choice = c("var"))
