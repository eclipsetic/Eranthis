res.comp  <- imputePCA(completed_df[,2:31], ncp.max=5)
nb = estim_ncpPCA(orange,ncp.max=5)
View(nb)
nb = estim_ncpPCA(E.pinnatifida_CD[ , 2:31],ncp.max=2)
nb = estim_ncpPCA(E.pinnatifida_CD[ , 2:31],ncp.max=1)
nb <- estim_ncpPCA(E.pinnatifida_CD[ , 2:31],ncp.max=1)
dfs <- scale(E.pinnatifida_CD[ , 2:31])
View(dfs)
dfs <- log(E.pinnatifida_CD[ , 2:31])
View(dfs)
dfs[is.infinite(dfs)] <- -99999
dfs <- data.matrix(drs)
dfs <- data.matrix(dfs)
dfs[is.infinite(dfs)] <- -99999
View(dfs)
res.comp = imputePCA(dfs,ncp=2)
res.comp  <- imputePCA(completed_df, ncp.max=5, quanti.sup = 2)
res.comp  <- imputePCA(completed_df, ncp.max=5, quanti.sup = 3)
res.comp  <- imputePCA(E.pinnatifida_CD, ncp.max=5, quanti.sup = 2)
E.pinnatifida_CD[, 2:31] <- lapply(E.pinnatifida_CD[, 2:31], as.numeric)
res.comp  <- imputePCA(E.pinnatifida_CD, ncp.max=5, quanti.sup = 2)
res.comp  <- missMDA::MIPCA(x = E.pinnatifida_CD[, 2:31], ncp = 2, scale = TRUE, method = c("Regularized","EM"))
res.comp  <- missMDA::MIPCA(X = E.pinnatifida_CD[, 2:31], ncp = 2, scale = TRUE, method = c("Regularized","EM"))
View(completed_df)
res.pca <- PCA(completed_df, quali.sup = 1)
fviz_pca_biplot(completed_df, label = "var", habillage = 1, col.var = "black",
addEllipses = TRUE, pointsize = 3, ellipse.level = 0.95,
mean.point = FALSE, ellipse.alpha = 0, repel = TRUE) +
scale_color_brewer(palette = "Set1") +
theme_minimal()
fviz_pca_biplot(res.pca, label = "var", habillage = 1, col.var = "black",
addEllipses = TRUE, pointsize = 3, ellipse.level = 0.95,
mean.point = FALSE, ellipse.alpha = 0, repel = TRUE) +
scale_color_brewer(palette = "Set1") +
theme_minimal()
View(completed_df)
View(E.pinnatifida_CD)
imp <- mice(data = E.pinnatifida_CD, method = 'cart', m = 5, seed=500)
View(completed_df)
completed_df <- complete(imp)
View(completed_df)
res.pca <- PCA(completed_df, quali.sup = 1)
fviz_pca_biplot(res.pca, label = "var", habillage = 1, col.var = "black",
addEllipses = TRUE, pointsize = 3, ellipse.level = 0.95,
mean.point = FALSE, ellipse.alpha = 0, repel = TRUE) +
scale_color_brewer(palette = "Set1") +
theme_minimal()
fviz_pca_biplot(res.pca, label = "var", habillage = 1, col.var = "black",
addEllipses = TRUE, pointsize = 3, ellipse.level = 0.95,
mean.point = FALSE, ellipse.alpha = 0, repel = TRUE) +
scale_color_brewer(palette = "Set1") +
theme_minimal()
imp <- mice(data = E.pinnatifida_CD, method = 'pmm', m = 5, seed=500)
completed_df <- complete(imp)
View(completed_df)
res.pca <- PCA(completed_df, quali.sup = 1)
fviz_pca_biplot(res.pca, label = "var", habillage = 1, col.var = "black",
addEllipses = TRUE, pointsize = 3, ellipse.level = 0.95,
mean.point = FALSE, ellipse.alpha = 0, repel = TRUE) +
scale_color_brewer(palette = "Set1") +
theme_minimal()
imp <- mice(data = E.pinnatifida_CD, method = 'midastouch', m = 5, seed=500)
completed_df <- complete(imp)
res.pca <- PCA(completed_df, quali.sup = 1)
fviz_pca_biplot(res.pca, label = "var", habillage = 1, col.var = "black",
addEllipses = TRUE, pointsize = 3, ellipse.level = 0.95,
mean.point = FALSE, ellipse.alpha = 0, repel = TRUE) +
scale_color_brewer(palette = "Set1") +
theme_minimal()
imp <- mice(data = E.pinnatifida_CD, method = 'rf', m = 5, seed=500)
completed_df <- complete(imp)
res.pca <- PCA(completed_df, quali.sup = 1)
fviz_pca_biplot(res.pca, label = "var", habillage = 1, col.var = "black",
addEllipses = TRUE, pointsize = 3, ellipse.level = 0.95,
mean.point = FALSE, ellipse.alpha = 0, repel = TRUE) +
scale_color_brewer(palette = "Set1") +
theme_minimal()
imp <- mice(data = E.pinnatifida_CD, method = 'norm', m = 5, seed=500)
imp <- mice(data = E.pinnatifida_CD, method = 'norm.nob', m = 5, seed=500)
imp <- mice(data = E.pinnatifida_CD, method = 'norm.predict', m = 5, seed=500)
imp <- mice(data = E.pinnatifida_CD, method = 'logreg.boot', m = 5, seed=500)
pacman::p_load(lubridate, purrr, dplyr, tidyr, forecast, zoo, rlang, ggplot2, tidyverse, raster,
sp, geodata, terra, rasterVis, BiocManager, dismo, XML, jsonlite, rgdal, rJava,
readxl, rgbif, factoextra, NbClust, cluster, openxlsx, caret, mice, missForest, knitr, htmltools,
FactoMineR, missMDA, pcaMethods, caret, ggfortify, gridExtra, hrbrthemes, corrplot, mice,
caTools
)
#Empty Global Enviroment
rm(list = ls())
# Read all lists in file
file_path <- "E:/Eranthis/Eranthis_morph.xlsx"
all_sheets <- excel_sheets(file_path)
for (sheet_name in all_sheets) {
var_name <- make.names(sheet_name)
assign(var_name, read_excel(file_path, sheet = sheet_name))
}
E.pinnatifida$Species <- paste (E.pinnatifida$Species, E.pinnatifida$`Sample ID`, sep=" _ ")
E.pinnatifida_CD <- E.pinnatifida[, -c(1,3,34:47)]
View(E.pinnatifida_CD)
set.seed(123)
View(E.pinnatifida_CD)
split = sample.split(E.pinnatifida_CD$PHfl, SplitRatio = 0.8)
training_set <- subset(E.pinnatifida_CD, split == TRUE)
test_set <- subset(E.pinnatifida_CD, split == FALSE)
regressor = lm(formula = PHfl ~ ., data = training_set)
View(training_set)
View(training_set)
n_levels <- nlevels(training_set$PHfr)
n_levels <- nlevels(training_set$BLSLfl)
View(training_set)
#Making One table
tables <- lapply(all_dataframes, get)
tables <- lapply(tables, as.data.frame)
all_dataframes <- list("E.sibirica", "E.tanhoensis", "E.sibirica_x_E.tanhoensis", "E.krasnoborovii", "E.sineli",
"E.stellata", "E.stellata.Korea.", "E.pinnatifida", "E.pungdoensis", "E.albiflora",
"E.lobulata", "E.byunsanensis")
#Making One table
tables <- lapply(all_dataframes, get)
tables <- lapply(tables, as.data.frame)
tables <- lapply(tables, function(tbl) mutate_all(tbl, as.character))
tables <- lapply(seq_along(all_dataframes), function(i) {
df <- get(all_dataframes[[i]])
df <- as.data.frame(mutate_all(df, as.character))
df <- df[complete.cases(df$Species), ]
df$Species <- all_dataframes[[i]]  # Здесь изменено
return(df)
})
combined_data <- bind_rows(tables)
combined_data <- combined_data[, -c(1,3,45,46,47,48) ]
combined_data <- combined_data %>%
mutate_at(vars(2:42), ~as.numeric(.))
View(combined_data)
set.seed(123)
split = sample.split(combined_data$PHfl, SplitRatio = 0.8)
training_set <- subset(combined_data, split == TRUE)
test_set <- subset(combined_data, split == FALSE)
regressor = lm(formula = PHfl ~ ., data = training_set)
View(training_set)
training_set <- subset(training_set, !all(is.na(column_name)))
training_set <- training_set[, colSums(is.na(training_set)) != nrow(training_set)]
regressor = lm(formula = PHfl ~ ., data = training_set)
View(training_set)
regressor = lm(formula = PHfl ~ ., data = training_set, na.action = NUL)
regressor = lm(formula = PHfl ~ ., data = training_set, na.action = NULL)
regressor = lm(formula = PHfl ~ ., data = training_set, na.action = TRUE)
regressor = lm(formula = PHfl ~ ., data = training_set, na.exclude = TRUE)
regressor = lm(formula = PHfl ~ ., data = training_set, na.action = na.exclude)
regressor = lm(formula = PHfl ~ ., data = training_set, na.action = na.exclude)
training_set <- na.omit(training_set)
regressor = lm(formula = PHfl ~ ., data = training_set, na.action = na.exclude)
training_set <- subset(combined_data, split == TRUE)
test_set <- subset(combined_data, split == FALSE)
(l <- sapply(training_set, function(x) is.factor(x)))
m <- training_set[, l]
View(m)
ifelse(n <- sapply(m, function(x) length(levels(x))) == 1, "DROP", "NODROP")
training_set <- training_set[, colSums(is.na(training_set)) != nrow(training_set)]
(l <- sapply(training_set, function(x) is.factor(x)))
m <- training_set[, l]
ifelse(n <- sapply(m, function(x) length(levels(x))) == 1, "DROP", "NODROP")
training_set <- subset(combined_data, split == TRUE)
test_set <- subset(combined_data, split == FALSE)
sapply( lapply(combined_data, unique), length)
sapply( lapply(training_set, unique), length)
training_set <- training_set[, colSums(is.na(training_set)) != nrow(training_set)]
sapply( lapply(training_set, unique), length)
non_na_counts <- colSums(!is.na(training_set))
selected_columns <- names(training_set)[non_na_counts >= 5]
training_set <- training_set[, selected_columns]
sapply( lapply(training_set, unique), length)
regressor = lm(formula = PHfl ~ ., data = training_set, na.action = na.exclude)
regressor = lm(formula = PHfl ~ BLSLfl + BLSWfl + BLSDfl, data = training_set, na.action = na.exclude)
y_pred = predict(regressor, newdata = test_set)
View(regressor)
summury(y_pred)
summary(y_pred)
split = sample.split(combined_data$PHfl, SplitRatio = 0.5)
training_set <- subset(combined_data, split == TRUE)
test_set <- subset(combined_data, split == FALSE)
sapply( lapply(training_set, unique), length)
training_set <- training_set[, colSums(is.na(training_set)) != nrow(training_set)]
sapply( lapply(training_set, unique), length)
regressor = lm(formula = PHfl ~ BLSLfl + BLSWfl + BLSDfl + BSLNfl, data = training_set, na.action = na.exclude)
y_pred = predict(regressor, newdata = test_set)
summary(y_pred)
training_set = scale(training_set)
training_set = scale(training_set, na.rm = TRUE)
View(training_set)
corrplot(cor(combined_data[,2:42]))
corrplot(cor(combined_data[,2:10]))
print(names(combined_data))
columns_to_impute <- c("Species", "PHfl", "PHfr", "BLSLfl", "BLSLfr", "BLSWfl", "BLSWfr", "BLSDfl", "BLSDfr",
"BSLNfl", "BSLNfr", "BSTNfl", "BSTNfr", "CLSLfl", "CLSLfr", "CLSWfl", "CLSWfr", "CLSDfl",
"CLSDfr", "CSLNfl", "CSLNfr", "CSTNfl", "CSTNfr", "SN", "SL", "SW", "PN", "PL", "FN",
"FL", "StL", "LCfl", "BLA", "CLA", "FP", "FSP", "PS", "SP", "AAdLC", "AAbLC", "MLC",
"SC")
combined_data_mean[[col]][is.na(combined_data[[col]])] <- mean(combined_data[[col]], na.rm = TRUE)
combined_data[[col]][is.na(combined_data[[col]])] <- mean(combined_data[[col]], na.rm = TRUE)
for (col in columns_to_impute) {
combined_data[[col]][is.na(combined_data[[col]])] <- mean(combined_data[[col]], na.rm = TRUE)
}
View(combined_data)
#Making One table
tables <- lapply(all_dataframes, get)
tables <- lapply(tables, as.data.frame)
tables <- lapply(tables, function(tbl) mutate_all(tbl, as.character))
tables <- lapply(seq_along(all_dataframes), function(i) {
df <- get(all_dataframes[[i]])
df <- as.data.frame(mutate_all(df, as.character))
df <- df[complete.cases(df$Species), ]
df$Species <- all_dataframes[[i]]
return(df)
})
combined_data <- bind_rows(tables)
combined_data <- combined_data[, -c(1,3,45,46,47,48) ]
combined_data <- combined_data %>%
mutate_at(vars(2:42), ~as.numeric(.))
columns_to_impute <- c("Species", "PHfl", "PHfr", "BLSLfl", "BLSLfr", "BLSWfl", "BLSWfr", "BLSDfl", "BLSDfr",
"BSLNfl", "BSLNfr", "BSTNfl", "BSTNfr", "CLSLfl", "CLSLfr", "CLSWfl", "CLSWfr", "CLSDfl",
"CLSDfr", "CSLNfl", "CSLNfr", "CSTNfl", "CSTNfr", "SN", "SL", "SW", "PN", "PL", "FN",
"FL", "StL", "LCfl", "BLA", "CLA", "FP", "FSP", "PS", "SP", "AAdLC", "AAbLC", "MLC",
"SC")
for (col in columns_to_impute) {
combined_data[[col]][is.na(combined_data[[col]])] <- mean(combined_data[[col]], na.rm = TRUE)
}
corrplot(cor(combined_data[,2:10]))
corrplot(cor(combined_data[,2:42]))
dim(combined_data)
View(test_set)
#Making One table
tables <- lapply(all_dataframes, get)
tables <- lapply(tables, as.data.frame)
tables <- lapply(tables, function(tbl) mutate_all(tbl, as.character))
# START -----------------------------------------------------------------------------------------------------------
Sys.setenv(LANG = "en_US.UTF-8")
#Library
library(pacman)
pacman::p_load(lubridate, purrr, dplyr, tidyr, forecast, zoo, rlang, ggplot2, tidyverse, raster,
sp, geodata, terra, rasterVis, BiocManager, dismo, XML, jsonlite, rgdal, rJava,
readxl, rgbif, factoextra, NbClust, cluster, openxlsx, caret, mice, missForest, knitr, htmltools,
FactoMineR, missMDA, pcaMethods, caret, ggfortify, gridExtra, hrbrthemes, corrplot, mice,
caTools
)
#Empty Global Enviroment
rm(list = ls())
# Read all lists in file
file_path <- "E:/Eranthis/Eranthis_morph.xlsx"
all_sheets <- excel_sheets(file_path)
for (sheet_name in all_sheets) {
var_name <- make.names(sheet_name)
assign(var_name, read_excel(file_path, sheet = sheet_name))
}
all_dataframes <- list("E.sibirica", "E.tanhoensis", "E.sibirica_x_E.tanhoensis", "E.krasnoborovii", "E.sineli",
"E.stellata", "E.stellata.Korea.", "E.pinnatifida", "E.pungdoensis", "E.albiflora",
"E.lobulata", "E.byunsanensis")
#Making One table
tables <- lapply(all_dataframes, get)
tables <- lapply(tables, as.data.frame)
tables <- lapply(tables, function(tbl) mutate_all(tbl, as.character))
tables <- lapply(seq_along(all_dataframes), function(i) {
df <- get(all_dataframes[[i]])
df <- as.data.frame(mutate_all(df, as.character))
df <- df[complete.cases(df$Species), ]
df$Species <- all_dataframes[[i]]
return(df)
})
combined_data <- bind_rows(tables)
combined_data <- combined_data[, -c(1,3,45,46,47,48) ]
combined_data <- combined_data %>%
mutate_at(vars(2:42), ~as.factor(.))
set.seed(123)
split = sample.split(combined_data$PHfl, SplitRatio = 0.5)
training_set <- subset(combined_data, split == TRUE)
test_set <- subset(combined_data, split == FALSE)
sapply( lapply(training_set, unique), length)
training_set <- training_set[, colSums(is.na(training_set)) != nrow(training_set)]
test_set <- test_set[, colSums(is.na(test_set)) != nrow(test_set)]
sapply( lapply(training_set, unique), length)
regressor = lm(formula = PHfl ~ ., data = training_set, na.action = na.exclude)
View(test_set)
combined_data <- combined_data %>%
mutate_at(vars(2:42), ~as.numeric(.))
split = sample.split(combined_data$PHfl, SplitRatio = 0.5)
training_set <- subset(combined_data, split == TRUE)
test_set <- subset(combined_data, split == FALSE)
sapply( lapply(training_set, unique), length)
training_set <- training_set[, colSums(is.na(training_set)) != nrow(training_set)]
test_set <- test_set[, colSums(is.na(test_set)) != nrow(test_set)]
regressor = lm(formula = PHfl ~ ., data = training_set, na.action = na.exclude)
y_pred = predict(regressor, newdata = test_set)
View(training_set)
View(test_set)
test_set$Species <- factor(test_set$Species)
y_pred = predict(regressor, newdata = test_set)
View(test_set)
training_set$Species <- factor(training_set$Species)
regressor = lm(formula = PHfl ~ ., data = training_set, na.action = na.exclude)
y_pred = predict(regressor, newdata = test_set)
levels(test_set$Species) <- union(levels(training_set$Species), levels(test_set$Species))
regressor = lm(formula = PHfl ~ ., data = training_set, na.action = na.exclude)
y_pred = predict(regressor, newdata = test_set)
#Empty Global Enviroment
rm(list = ls())
# Read all lists in file
file_path <- "E:/Eranthis/Eranthis_morph.xlsx"
all_sheets <- excel_sheets(file_path)
for (sheet_name in all_sheets) {
var_name <- make.names(sheet_name)
assign(var_name, read_excel(file_path, sheet = sheet_name))
}
all_dataframes <- list("E.sibirica", "E.tanhoensis", "E.sibirica_x_E.tanhoensis", "E.krasnoborovii", "E.sineli",
"E.stellata", "E.stellata.Korea.", "E.pinnatifida", "E.pungdoensis", "E.albiflora",
"E.lobulata", "E.byunsanensis")
#Making One table
tables <- lapply(all_dataframes, get)
tables <- lapply(tables, as.data.frame)
tables <- lapply(tables, function(tbl) mutate_all(tbl, as.character))
tables <- lapply(seq_along(all_dataframes), function(i) {
df <- get(all_dataframes[[i]])
df <- as.data.frame(mutate_all(df, as.character))
df <- df[complete.cases(df$Species), ]
df$Species <- all_dataframes[[i]]
return(df)
})
combined_data <- bind_rows(tables)
combined_data <- combined_data[, -c(1,3,45,46,47,48) ]
combined_data <- combined_data %>%
mutate_at(vars(2:42), ~as.numeric(.))
set.seed(123)
split = sample.split(combined_data$PHfl, SplitRatio = 0.5)
training_set <- subset(combined_data, split == TRUE)
test_set <- subset(combined_data, split == FALSE)
regressor
regressor = lm(formula = PHfl ~ ., data = training_set, na.action = na.exclude)
training_set <- training_set[, colSums(is.na(training_set)) != nrow(training_set)]
test_set <- test_set[, colSums(is.na(test_set)) != nrow(test_set)]
regressor = lm(formula = PHfl ~ ., data = training_set, na.action = na.exclude)
#Empty Global Enviroment
rm(list = ls())
# Read all lists in file
file_path <- "E:/Eranthis/Eranthis_morph.xlsx"
all_sheets <- excel_sheets(file_path)
for (sheet_name in all_sheets) {
var_name <- make.names(sheet_name)
assign(var_name, read_excel(file_path, sheet = sheet_name))
}
all_dataframes <- list("E.sibirica", "E.tanhoensis", "E.sibirica_x_E.tanhoensis", "E.krasnoborovii", "E.sineli",
"E.stellata", "E.stellata.Korea.", "E.pinnatifida", "E.pungdoensis", "E.albiflora",
"E.lobulata", "E.byunsanensis")
#Making One table
tables <- lapply(all_dataframes, get)
tables <- lapply(tables, as.data.frame)
tables <- lapply(tables, function(tbl) mutate_all(tbl, as.character))
tables <- lapply(seq_along(all_dataframes), function(i) {
df <- get(all_dataframes[[i]])
df <- as.data.frame(mutate_all(df, as.character))
df <- df[complete.cases(df$Species), ]
df$Species <- all_dataframes[[i]]
return(df)
})
combined_data <- bind_rows(tables)
combined_data <- combined_data[, -c(1,3,45,46,47,48) ]
combined_data <- combined_data %>%
mutate_at(vars(2:42), ~as.numeric(.))
set.seed(123)
split = sample.split(combined_data$PHfl, SplitRatio = 0.5)
training_set <- subset(combined_data, split == TRUE)
test_set <- subset(combined_data, split == FALSE)
sapply( lapply(training_set, unique), length)
training_set <- training_set[, colSums(is.na(training_set)) != nrow(training_set)]
test_set <- test_set[, colSums(is.na(test_set)) != nrow(test_set)]
regressor = lm(formula = PHfl ~ ., data = training_set, na.action = na.exclude)
# Multiple Linear Regression Modelling ----------------------------------------------------------------------------
combined_data <- combined_data %>%
mutate_at(vars(2:42), ~as.factor(.))
set.seed(123)
split = sample.split(combined_data$PHfl, SplitRatio = 0.5)
training_set <- subset(combined_data, split == TRUE)
test_set <- subset(combined_data, split == FALSE)
sapply( lapply(training_set, unique), length)
training_set <- training_set[, colSums(is.na(training_set)) != nrow(training_set)]
test_set <- test_set[, colSums(is.na(test_set)) != nrow(test_set)]
regressor = lm(formula = PHfl ~ ., data = training_set, na.action = na.exclude)
# Multiple Linear Regression Modelling ----------------------------------------------------------------------------
combined_data <- combined_data %>%
mutate_at(vars(2:42), ~as.numeric(.))
set.seed(123)
split = sample.split(combined_data$PHfl, SplitRatio = 0.5)
training_set <- subset(combined_data, split == TRUE)
test_set <- subset(combined_data, split == FALSE)
sapply( lapply(training_set, unique), length)
training_set <- training_set[, colSums(is.na(training_set)) != nrow(training_set)]
test_set <- test_set[, colSums(is.na(test_set)) != nrow(test_set)]
regressor = lm(formula = PHfl ~ ., data = training_set, na.action = na.exclude)
View(training_set)
combined_data$Species <- factor(combined_data$Species)
View(combined_data)
set.seed(123)
split = sample.split(combined_data$PHfl, SplitRatio = 0.5)
training_set <- subset(combined_data, split == TRUE)
test_set <- subset(combined_data, split == FALSE)
sapply( lapply(training_set, unique), length)
training_set <- training_set[, colSums(is.na(training_set)) != nrow(training_set)]
regressor = lm(formula = PHfl ~ ., data = training_set, na.action = na.exclude)
# Multiple Linear Regression Modelling ----------------------------------------------------------------------------
combined_data <- combined_data %>%
mutate_at(vars(2:42), ~as.factor(.))
combined_data$Species <- factor(combined_data$Species)
set.seed(123)
split = sample.split(combined_data$PHfl, SplitRatio = 0.5)
training_set <- subset(combined_data, split == TRUE)
test_set <- subset(combined_data, split == FALSE)
sapply( lapply(training_set, unique), length)
training_set <- training_set[, colSums(is.na(training_set)) != nrow(training_set)]
regressor = lm(formula = PHfl ~ ., data = training_set, na.action = na.exclude)
regressor = lm(formula = PHfl ~ ., data = training_set, na.action = na.action)
regressor = lm(formula = PHfl ~ ., data = training_set, na.action = na.exclude())
regressor = lm(formula = PHfl ~ ., data = training_set, na.action = na.exclude)
regressor = lm(formula = PHfl ~ ., data = training_set, na.action = na.omit)
# Multiple Linear Regression Modelling ----------------------------------------------------------------------------
combined_data <- combined_data %>%
+   mutate_at(vars(2:42), ~as.numeric(.))
# Multiple Linear Regression Modelling ----------------------------------------------------------------------------
combined_data <- combined_data %>%
mutate_at(vars(2:42), ~as.numeric(.))
# Multiple Linear Regression Modelling ----------------------------------------------------------------------------
combined_data <- combined_data %>%
mutate_at(vars(1:42), ~as.numeric(.))
set.seed(123)
split = sample.split(combined_data$PHfl, SplitRatio = 0.5)
training_set <- subset(combined_data, split == TRUE)
test_set <- subset(combined_data, split == FALSE)
sapply( lapply(training_set, unique), length)
training_set <- training_set[, colSums(is.na(training_set)) != nrow(training_set)]
regressor = lm(formula = PHfl ~ ., data = training_set, na.action = na.omit)
regressor = lm(formula = PHfl ~ ., data = training_set, na.action = na.exclude)
View(test_set)
View(training_set)
View(combined_data)
View(E.albiflora)
View(E.byunsanensis)
View(E.krasnoborovii)
View(E.lobulata)
View(E.pinnatifida)
View(E.pungdoensis)
View(E.sibirica)
View(E.sibirica_x_E.tanhoensis)
View(E.sineli)
View(E.stellata)
View(combined_data)
all_dataframes <- list("E.sibirica", "E.tanhoensis", "E.sibirica_x_E.tanhoensis", "E.krasnoborovii", "E.sineli",
"E.stellata", "E.stellata.Korea.", "E.pinnatifida", "E.pungdoensis", "E.albiflora",
"E.lobulata", "E.byunsanensis")
#Making One table
tables <- lapply(all_dataframes, get)
tables <- lapply(tables, as.data.frame)
tables <- lapply(tables, function(tbl) mutate_all(tbl, as.character))
View(combined_data)
combined_data <- bind_rows(tables)
combined_data <- combined_data[, -c(1,3,45,46,47,48) ]
View(combined_data)
View(combined_data)
combined_data <- combined_data %>%
mutate_at(vars(2:42), ~as.numeric(.))
split = sample.split(combined_data$PHfl, SplitRatio = 0.5)
View(training_set)
training_set <- subset(combined_data, split == TRUE)
test_set <- subset(combined_data, split == FALSE)
View(training_set)
sapply( lapply(training_set, unique), length)
training_set <- training_set[, colSums(is.na(training_set)) != nrow(training_set)]
regressor = lm(formula = PHfl ~ ., data = training_set, na.action = na.exclude)
View(training_set)
sapply( lapply(training_set, unique), length)
View(training_set)
nlevels(training_set)
nlevels(training_set$Species)
nlevels(training_set$PHfl)
nlevels(training_set$BLSLfl)
nlevels(training_set$BLSWfl)
regressor = lm(formula = PHfl ~ ., data = training_set, na.action = "na.exclude")
# Multiple Linear Regression Modelling ----------------------------------------------------------------------------
combined_data <- combined_data %>%
mutate_at(vars(2:42), ~as.factor(.))
set.seed(123)
split = sample.split(combined_data$PHfl, SplitRatio = 0.5)
training_set <- subset(combined_data, split == TRUE)
test_set <- subset(combined_data, split == FALSE)
sapply( lapply(training_set, unique), length)
training_set <- training_set[, colSums(is.na(training_set)) != nrow(training_set)]
regressor = lm(formula = PHfl ~ ., data = training_set, na.action = "na.exclude")
View(test_set)
# Multiple Linear Regression Modelling ----------------------------------------------------------------------------
combined_data <- combined_data %>%
mutate_at(vars(2:42), ~as.numeric(.))
View(combined_data)
combined_data <- bind_rows(tables)
combined_data <- combined_data[, -c(1,3,45,46,47,48) ]
combined_data <- combined_data %>%
mutate_at(vars(2:42), ~as.numeric(.))
set.seed(123)
split = sample.split(combined_data$PHfl, SplitRatio = 0.5)
training_set <- subset(combined_data, split == TRUE)
test_set <- subset(combined_data, split == FALSE)
sapply( lapply(training_set, unique), length)
training_set <- training_set[, colSums(is.na(training_set)) != nrow(training_set)]
regressor = lm(formula = PHfl ~ ., data = training_set, na.action = "na.exclude")
y_pred = predict(regressor, newdata = test_set)
regressor = lm(formula = PHfl ~ ., data = training_set, na.action = "na.omit")
values_count <- sapply(lapply(training_set, unique), length)
regressor = lm(formula = PHfl ~ ., data = training_set[ , values_count > 1], na.action = "na.omit")
training_set <- na.omit(training_set)
