reshape2, Rtsne, shipunov, tidyverse, tseries, umap, vegan)
#Empty Global Enviroment
rm(list = ls())
# Read all lists in file
file_path <- "E:/Eranthis/Eranthis_morph.xlsx"
all_sheets <- excel_sheets(file_path)
for (sheet_name in all_sheets) {
var_name <- make.names(sheet_name)
assign(var_name, read_excel(file_path, sheet = sheet_name))
}
dir.create("E:/Eranthis/maps")
all_dataframes <- list("E.sibirica", "E.tanhoensis", "E.sibirica_x_E.tanhoensis", "E.krasnoborovii", "E.sineli",
"E.stellata", "E.stellata.Korea.", "E.pinnatifida", "E.pungdoensis", "E.albiflora",
"E.lobulata", "E.byunsanensis")
#Making One table
tables <- lapply(all_dataframes, get)
tables <- lapply(tables, as.data.frame)
tables <- lapply(tables, function(tbl) mutate_all(tbl, as.character))
tables <- lapply(seq_along(all_dataframes), function(i) {
df <- get(all_dataframes[[i]])
df <- as.data.frame(mutate_all(df, as.character))
df <- df[complete.cases(df$Species), ]
df$Species <- all_dataframes[[i]]
return(df)
})
combined_data <- bind_rows(tables)
combined_data <- combined_data[, -c(1,3,34:44,48) ]
combined_data <- combined_data %>%
mutate_at(vars(2:34), ~as.numeric(.))
View(combined_data)
#1,3,15,17,19,23,29,30,31
model_fr <- combined_data[ , c(1,3,5,7,9,13,15,17,19,21,23,29,30,31,33,34)]
filter <- apply(model_fr[, -1], 1, function(row) !all(is.na(row)))
model_fr <- model_fr[filter, ]
model_fl <- combined_data[ , c(1,2,4,6,8,12,14,16,18,20,22,24,25,26,27,28,32)]
filter <- apply(model_fl[, -1], 1, function(row) !all(is.na(row)))
model_fl <- model_fl[filter, ]
model_fr_cc <- complete.cases(model_fr)
table(model_fr_cc)
model_fl_cc <- complete.cases(model_fl)
table(model_fl_cc)
res.pca <- PCA(model_fr, quali.sup = 1, graph = FALSE, ncp = 5)
model_fl <- na.omit(model_fl)
res.pca <- PCA(model_fr, quali.sup = 1, graph = FALSE, ncp = 5)
res.pca <- PCA(model_fl, quali.sup = 1, graph = FALSE, ncp = 5)
fviz_pca_biplot(res.pca, label = "var", habillage = 1, col.var = "black",
addEllipses = TRUE, pointsize = 3, ellipse.level = 0.95,
mean.point = FALSE, ellipse.alpha = 0, repel = TRUE) +
scale_color_brewer(palette = "Set1") +
theme_minimal()
res.pca$eig
fviz_eig(res.pca)
get_pca(res.pca)$contrib
fviz_pca_contrib(res.pca, choice = c("var"))
# Decision_Tree
pacman::p_load(datasets, caTools, party, dplyr, magrittr)
#Empty Global Enviroment
rm(list = ls())
# Read all lists in file
file_path <- "E:/Eranthis/Eranthis_morph.xlsx"
all_sheets <- excel_sheets(file_path)
for (sheet_name in all_sheets) {
var_name <- make.names(sheet_name)
assign(var_name, read_excel(file_path, sheet = sheet_name))
}
all_dataframes <- list("E.sibirica", "E.tanhoensis", "E.sibirica_x_E.tanhoensis", "E.krasnoborovii", "E.sineli",
"E.stellata", "E.stellata.Korea.", "E.pinnatifida", "E.pungdoensis", "E.albiflora",
"E.lobulata", "E.byunsanensis")
#Making One table
tables <- lapply(all_dataframes, get)
tables <- lapply(tables, as.data.frame)
tables <- lapply(tables, function(tbl) mutate_all(tbl, as.character))
tables <- lapply(seq_along(all_dataframes), function(i) {
df <- get(all_dataframes[[i]])
df <- as.data.frame(mutate_all(df, as.character))
df <- df[complete.cases(df$Species), ]
df$Species <- all_dataframes[[i]]
return(df)
})
combined_data <- bind_rows(tables)
combined_data <- combined_data[, -c(1,3,34:44,48) ]
combined_data <- combined_data %>%
mutate_at(vars(2:34), ~as.numeric(.))
pacman::p_load(lubridate, purrr, dplyr, tidyr, forecast, zoo, rlang, ggplot2, tidyverse, raster,
sp, geodata, terra, rasterVis, BiocManager, dismo, XML, jsonlite, rJava,
readxl, factoextra, NbClust, cluster, openxlsx, caret, mice, missForest, knitr, htmltools,
FactoMineR, missMDA, pcaMethods, caret, ggfortify, gridExtra, hrbrthemes, corrplot, caTools,
vegan, pvclust, ClassDiscovery
)
# rgdal, rgbif
pacman::p_load(dplyr, factoextra, fastICA, ggplot2, ggpubr, NMF,  party, psych, randomForest,
reshape2, Rtsne, shipunov, tidyverse, tseries, umap, vegan)
# Decision_Tree
pacman::p_load(datasets, caTools, party, dplyr, magrittr)
#Empty Global Enviroment
rm(list = ls())
# Read all lists in file
file_path <- "E:/Eranthis/Eranthis_morph.xlsx"
all_sheets <- excel_sheets(file_path)
for (sheet_name in all_sheets) {
var_name <- make.names(sheet_name)
assign(var_name, read_excel(file_path, sheet = sheet_name))
}
all_dataframes <- list("E.sibirica", "E.tanhoensis", "E.sibirica_x_E.tanhoensis", "E.krasnoborovii", "E.sineli",
"E.stellata", "E.stellata.Korea.", "E.pinnatifida", "E.pungdoensis", "E.albiflora",
"E.lobulata", "E.byunsanensis")
#Making One table
tables <- lapply(all_dataframes, get)
tables <- lapply(tables, as.data.frame)
tables <- lapply(tables, function(tbl) mutate_all(tbl, as.character))
tables <- lapply(seq_along(all_dataframes), function(i) {
df <- get(all_dataframes[[i]])
df <- as.data.frame(mutate_all(df, as.character))
df <- df[complete.cases(df$Species), ]
df$Species <- all_dataframes[[i]]
return(df)
})
combined_data <- bind_rows(tables)
combined_data <- combined_data[, -c(1,3,34:44,48) ]
combined_data <- combined_data %>%
mutate_at(vars(2:34), ~as.numeric(.))
#1,3,15,17,19,23,29,30,31
model_fr <- combined_data[ , c(1,3,5,7,9,13,15,17,19,21,23,29,30,31,33,34)]
filter <- apply(model_fr[, -1], 1, function(row) !all(is.na(row)))
model_fr <- model_fr[filter, ]
model_fr<- na.omit(model_fr)
table(model_fr)
model_fl <- combined_data[ , c(1,2,4,6,8,12,14,16,18,20,22,24,25,26,27,28,32)]
filter <- apply(model_fl[, -1], 1, function(row) !all(is.na(row)))
model_fl <- model_fl[filter, ]
model_fl <- na.omit(model_fl)
table(model_fl)
set.seed(123)
split = sample.split(model_fl, SplitRatio = 0.8)
training_set <- subset(model_fl, split == TRUE)
test_set <- subset(model_fl, split == FALSE)
model<- ctree(Species ~ ., training_set)
View(test_set)
View(test_set)
model <- ctree(Species ~ ., training_set)
training_set$Species <- as.factor(training_set$Species)
model <- ctree(Species ~ ., training_set)
plot(model)
test_set$Species <- as.factor(test_set$Species)
predict_model <- predict(ctree_, test_data)
predict_model <- predict(model, test_data)
predict_model <- predict(model, test_set)
m_at <- table(test_set$Species, predict_model)
m_at
ac_Test < - sum(diag(m_at)) / sum(m_at)
ac_Test <- sum(diag(m_at)) / sum(m_at)
print(paste('Accuracy for test is found to be', ac_Test))
plot(predict_model)
model_test <- ctree(Species ~ ., test_set)
plot(model_test)
model_test <- ctree(Species ~ ., predict_model)
model_test <- ctree(Species ~ ., m_at)
model_test <- ctree(Species ~ ., data = test_set)
plot(model_test)
plot(model)
split = sample.split(model_fl, SplitRatio = 0.5)
training_set <- subset(model_fl, split == TRUE)
test_set <- subset(model_fl, split == FALSE)
training_set$Species <- as.factor(training_set$Species)
test_set$Species <- as.factor(test_set$Species)
model <- ctree(Species ~ ., training_set)
plot(model)
predict_model <- predict(model, test_set)
m_at <- table(test_set$Species, predict_model)
ac_Test <- sum(diag(m_at)) / sum(m_at)
print(paste('Accuracy for test is found to be', ac_Test))
split = sample.split(model_fl, SplitRatio = 0.8)
training_set <- subset(model_fl, split == TRUE)
test_set <- subset(model_fl, split == FALSE)
training_set$Species <- as.factor(training_set$Species)
test_set$Species <- as.factor(test_set$Species)
model <- ctree(Species ~ ., training_set)
plot(model)
predict_model <- predict(model, test_set)
m_at <- table(test_set$Species, predict_model)
ac_Test <- sum(diag(m_at)) / sum(m_at)
print(paste('Accuracy for test is found to be', ac_Test))
set.seed(123)
split = sample.split(model_fl, SplitRatio = 0.8)
training_set <- subset(model_fl, split == TRUE)
test_set <- subset(model_fl, split == FALSE)
training_set$Species <- as.factor(training_set$Species)
test_set$Species <- as.factor(test_set$Species)
model <- ctree(Species ~ ., training_set)
plot(model)
predict_model <- predict(model, test_set)
m_at <- table(test_set$Species, predict_model)
ac_Test <- sum(diag(m_at)) / sum(m_at)
print(paste('Accuracy for test is found to be', ac_Test))
split = sample.split(model_fl, SplitRatio = 0.6)
set.seed(123)
split = sample.split(model_fl, SplitRatio = 0.6)
training_set <- subset(model_fl, split == TRUE)
test_set <- subset(model_fl, split == FALSE)
training_set$Species <- as.factor(training_set$Species)
test_set$Species <- as.factor(test_set$Species)
model <- ctree(Species ~ ., training_set)
plot(model)
View(training_set)
View(test_set)
predict_model <- predict(model, test_set)
m_at <- table(test_set$Species, predict_model)
ac_Test <- sum(diag(m_at)) / sum(m_at)
print(paste('Accuracy for test is found to be', ac_Test))
set.seed(123)
split = sample.split(model_fl, SplitRatio = 0.8)
training_set <- subset(model_fl, split == TRUE)
test_set <- subset(model_fl, split == FALSE)
training_set$Species <- as.factor(training_set$Species)
test_set$Species <- as.factor(test_set$Species)
model <- ctree(Species ~ ., training_set)
plot(model)
predict_model <- predict(model, test_set)
m_at <- table(test_set$Species, predict_model)
ac_Test <- sum(diag(m_at)) / sum(m_at)
print(paste('Accuracy for test is found to be', ac_Test))
set.seed(123)
split = sample.split(model_fl, SplitRatio = 0.7)
training_set <- subset(model_fl, split == TRUE)
test_set <- subset(model_fl, split == FALSE)
training_set$Species <- as.factor(training_set$Species)
test_set$Species <- as.factor(test_set$Species)
model <- ctree(Species ~ ., training_set)
plot(model)
predict_model <- predict(model, test_set)
m_at <- table(test_set$Species, predict_model)
ac_Test <- sum(diag(m_at)) / sum(m_at)
print(paste('Accuracy for test is found to be', ac_Test))
set.seed(123)
split = sample.split(model_fl, SplitRatio = 0.5)
training_set <- subset(model_fl, split == TRUE)
test_set <- subset(model_fl, split == FALSE)
training_set$Species <- as.factor(training_set$Species)
test_set$Species <- as.factor(test_set$Species)
model <- ctree(Species ~ ., training_set)
plot(model)
predict_model <- predict(model, test_set)
m_at <- table(test_set$Species, predict_model)
ac_Test <- sum(diag(m_at)) / sum(m_at)
print(paste('Accuracy for test is found to be', ac_Test))
split = sample.split(model_fl, SplitRatio = 0.6)
training_set <- subset(model_fl, split == TRUE)
test_set <- subset(model_fl, split == FALSE)
training_set$Species <- as.factor(training_set$Species)
test_set$Species <- as.factor(test_set$Species)
model <- ctree(Species ~ ., training_set)
plot(model)
predict_model <- predict(model, test_set)
m_at <- table(test_set$Species, predict_model)
ac_Test <- sum(diag(m_at)) / sum(m_at)
print(paste('Accuracy for test is found to be', ac_Test))
set.seed(123)
split = sample.split(model_fl, SplitRatio = 0.6)
training_set <- subset(model_fl, split == TRUE)
test_set <- subset(model_fl, split == FALSE)
training_set$Species <- as.factor(training_set$Species)
test_set$Species <- as.factor(test_set$Species)
model <- ctree(Species ~ ., training_set)
plot(model)
predict_model <- predict(model, test_set)
m_at <- table(test_set$Species, predict_model)
ac_Test <- sum(diag(m_at)) / sum(m_at)
print(paste('Accuracy for test is found to be', ac_Test))
prp(model)
# Decision_Tree
pacman::p_load(datasets, caTools, party, dplyr, magrittr, rpart, rplat.plot)
# Decision_Tree
pacman::p_load(datasets, caTools, party, dplyr, magrittr, rattle)
plot(model)
fancyRpartPlot(rpart(Species~., data=iris),yesno=2,split.col="black",nn.col="black",
caption="",palette="Set2",branch.col="black")
fancyRpartPlot(rpart(Species~., data=training_set),yesno=2,split.col="black",nn.col="black",
caption="",palette="Set2",branch.col="black")
fancyRpartPlot(Species~., data=training_set,yesno=2,split.col="black",nn.col="black",
caption="",palette="Set2",branch.col="black")
fancyRpartPlot(rpart(Species~., data=training_set),yesno=2,split.col="black",nn.col="black",
caption="",palette="Set2",branch.col="black")
corrplot(cor(model_fl))
corrplot(cor(model_fl[,-1]))
# START -----------------------------------------------------------------------------------------------------------
Sys.setenv(LANG = "en_US.UTF-8")
#Library
library(pacman)
pacman::p_load(lubridate, purrr, dplyr, tidyr, forecast, zoo, rlang, ggplot2, tidyverse, raster,
sp, geodata, terra, rasterVis, BiocManager, dismo, XML, jsonlite, rJava,
readxl, factoextra, NbClust, cluster, openxlsx, caret, mice, missForest, knitr, htmltools,
FactoMineR, missMDA, pcaMethods, caret, ggfortify, gridExtra, hrbrthemes, corrplot, caTools,
vegan, pvclust, ClassDiscovery
)
# rgdal, rgbif
pacman::p_load(dplyr, factoextra, fastICA, ggplot2, ggpubr, NMF,  party, psych, randomForest,
reshape2, Rtsne, shipunov, tidyverse, tseries, umap, vegan)
# Decision_Tree
pacman::p_load(datasets, caTools, party, dplyr, magrittr, rattle)
#Empty Global Enviroment
rm(list = ls())
# Read all lists in file
file_path <- "E:/Eranthis/Eranthis_morph.xlsx"
all_sheets <- excel_sheets(file_path)
for (sheet_name in all_sheets) {
var_name <- make.names(sheet_name)
assign(var_name, read_excel(file_path, sheet = sheet_name))
}
all_dataframes <- list("E.sibirica", "E.tanhoensis", "E.sibirica_x_E.tanhoensis", "E.krasnoborovii", "E.sineli",
"E.stellata", "E.stellata.Korea.", "E.pinnatifida", "E.pungdoensis", "E.albiflora",
"E.lobulata", "E.byunsanensis")
#Making One table
tables <- lapply(all_dataframes, get)
tables <- lapply(tables, as.data.frame)
tables <- lapply(tables, function(tbl) mutate_all(tbl, as.character))
tables <- lapply(seq_along(all_dataframes), function(i) {
df <- get(all_dataframes[[i]])
df <- as.data.frame(mutate_all(df, as.character))
df <- df[complete.cases(df$Species), ]
df$Species <- all_dataframes[[i]]
return(df)
})
combined_data <- bind_rows(tables)
combined_data <- combined_data[, -c(1,3,34:44,48) ]
combined_data <- combined_data %>%
mutate_at(vars(2:34), ~as.numeric(.))
#1,3,15,17,19,23,29,30,31
model_fr <- combined_data[ , c(1,3,5,7,9,13,15,17,19,21,23,29,30,31,33,34)]
filter <- apply(model_fr[, -1], 1, function(row) !all(is.na(row)))
model_fr <- model_fr[filter, ]
model_fr<- na.omit(model_fr)
table(model_fr)
model_fl <- combined_data[ , c(1,2,4,6,8,12,14,16,18,20,22,24,25,26,27,28,32)]
filter <- apply(model_fl[, -1], 1, function(row) !all(is.na(row)))
model_fl <- model_fl[filter, ]
model_fl <- na.omit(model_fl)
model <- lm(Species ~ . - Species, data = model_fr)
# Create a distance matrix
dist_matrix <- dist(model_fr)
# Perform hierarchical clustering
hc <- hclust(dist_matrix, method = "ward.D2")
# Plot the dendrogram
plot(hc, main = "Hierarchical Clustering Dendrogram", sub = NULL, xlab = NULL, cex = 0.8, labels = model_fr$Species)
res.pca <- PCA(model_fl, quali.sup = 1, graph = FALSE, ncp = 5)
fviz_pca_biplot(res.pca, label = "var", habillage = 1, col.var = "black",
addEllipses = TRUE, pointsize = 3, ellipse.level = 0.95,
mean.point = FALSE, ellipse.alpha = 0, repel = TRUE) +
scale_color_brewer(palette = "Set1") +
theme_minimal()
fviz_pca_ind(res.pca, label = "var", habillage = 1, col.var = "black",
addEllipses = TRUE, pointsize = 3, ellipse.level = 0.95,
mean.point = FALSE, ellipse.alpha = 0, repel = TRUE)
fviz_pca_var(res.pca, col.var="black")+
theme_minimal()
fviz_eig(res.pca)
get_pca(res.pca)$contrib
fviz_pca_contrib(res.pca, choice = c("var"))
View(res.pca)
res.pca[["eig"]]
res.pca <- PCA(model_fl, quali.sup = 1, graph = FALSE, ncp = 2)
fviz_pca_biplot(res.pca, label = "var", habillage = 1, col.var = "black",
addEllipses = TRUE, pointsize = 3, ellipse.level = 0.95,
mean.point = FALSE, ellipse.alpha = 0, repel = TRUE) +
scale_color_brewer(palette = "Set1") +
theme_minimal()
fviz_pca_ind(res.pca, label = "var", habillage = 1, col.var = "black",
addEllipses = TRUE, pointsize = 3, ellipse.level = 0.95,
mean.point = FALSE, ellipse.alpha = 0, repel = TRUE)
fviz_eig(res.pca)
get_pca(res.pca)$contrib
fviz_pca_contrib(res.pca, choice = c("var"))
fviz_contrib(res.pca, choice = "ind", axes = 1:2)
fviz_contrib(res.pca, choice = "var", axes = 1:2)
fviz_contrib(res.pca, choice = "var", axes = 1:3)
res.pca <- PCA(model_fl, quali.sup = 1, graph = FALSE, ncp = 5)
fviz_contrib(res.pca, choice = "var", axes = 1:3)
fviz_contrib(res.pca, choice = "var", axes = 1:2)
fviz_cos2(res.pca, choice = "var", axes = 1:2)
# START -----------------------------------------------------------------------------------------------------------
Sys.setenv(LANG = "en_US.UTF-8")
#Library
library(pacman)
pacman::p_load(lubridate, purrr, dplyr, tidyr, forecast, zoo, rlang, ggplot2, tidyverse, raster,
sp, geodata, terra, rasterVis, BiocManager, dismo, XML, jsonlite, rJava,
readxl, factoextra, NbClust, cluster, openxlsx, caret, mice, missForest, knitr, htmltools,
FactoMineR, missMDA, pcaMethods, caret, ggfortify, gridExtra, hrbrthemes, corrplot, caTools,
vegan, pvclust, ClassDiscovery
)
# rgdal, rgbif
pacman::p_load(dplyr, factoextra, fastICA, ggplot2, ggpubr, NMF,  party, psych, randomForest,
reshape2, Rtsne, shipunov, tidyverse, tseries, umap, vegan)
# Decision_Tree
pacman::p_load(datasets, caTools, party, dplyr, magrittr, rattle)
#Empty Global Enviroment
rm(list = ls())
flora <- read.csv("http://panarcticflora.org/flora#paf-01")
View(flora)
flora <- read.csv("http://panarcticflora.org/flora")
View(flora)
pacman::p_load(httr, XML, dplyr)
pacman::p_load(httr, XML, dplyr, xml2)
flora <- read_html("http://panarcticflora.org/flora")
View(flora)
Flora <- stringr::str_extract(flora)
Flora <- stringr::str_extract(flora)
pacman::p_load(httr, XML, dplyr, xml2, rvest)
Flora <- document %>% html_elements("paf")
Flora <- flora %>% html_elements("paf")
Flora <- flora %>% html_elements("a_class")
Flora <- flora %>% html_elements("a.class")
View(Flora)
Flora <- flora %>% html_elements("li")
View(Flora)
Flora <- flora %>% html_elements("div.class")
Flora <- flora %>% html_elements("a class")
Flora <- flora %>% html_elements("paf")
Flora <- flora %>% html_elements("a class")
Flora <- flora %>% html_elements("li")
html_product <- flora %>% html_elements("li")
names <- html_product %>% html_element("paf")
View(names)
names[[1]]
names <- html_product %>% html_element("a class")
View(names)
names <- html_product %>% html_element("a.class")
View(names)
View(html_product)
html_product <- flora %>% html_elements("ul class")
html_product <- flora %>% html_elements("ul.class")
html_product <- flora %>% html_elements("div id")
html_product <- flora %>% html_elements("div.id")
html_product <- flora %>% html_elements("div_id")
html_product <- flora %>% html_elements("children")
html_product <- flora %>% html_elements("div.simple-list")
#Empty Global Enviroment
rm(list = ls())
flora <- read_html("http://panarcticflora.org")
html_product <- flora %>% html_elements("div.simple-list")
html_product <- flora %>% html_elements("li")
View(html_product)
html_product <- flora %>% html_elements("ul")
View(html_product)
html_product <- flora %>% html_elements("ul class")
html_product <- flora %>% html_elements("ul_class")
html_product <- flora %>% html_elements("ul.class")
html_product <- flora %>% html_elements("paf")
html_product <- flora %>% html_elements("li")
names <- html_product %>% html_element("paf")
View(names)
html_product <- flora %>% html_elements("li.product")
html_product <- flora %>% html_elements("li.class")
html_product <- flora %>% html_elements("a.class")
html_product <- flora %>% html_elements("li_product")
html_product <- flora %>% html_elements("href")
str(flora)
floraNodes <- html_nodes(flora, "table")
floraNodes
flora <- read_html("https://panarcticflora.org")
html_product <- flora %>% html_elements("href")
floraNodes <- html_nodes(flora, "table")
flora <- read_html("http://panarcticflora.org")
html_product <- flora %>% html_elements("href")
View(flora)
xml_attrs(xml_child(xml_child(flora, 1), 5))[["src"]]
str(flora)
floraNodes <- html_nodes(flora, "table")
#Empty Global Enviroment
rm(list = ls())
pacman::p_load(httr, XML, dplyr, xml2, rvest)
flora <- read_html("http://panarcticflora.org")
html_product <- flora %>% html_elements("href")
floraNodes <- html_nodes(flora, "table")
View(floraNodes)
floraNodes
flora <- read_html("http://panarcticflora.org/flora")
str(flora)
floraNodes <- html_nodes(flora, "table")
html_product <- flora %>% html_elements("p")
html_product <- flora %>% html_elements("h2")
View(html_product)
html_product[[1]]
names <- html_product %>% html_element("paf")
View(names)
names <- html_product %>% html_element("h2")
View(names)
flora <- read_html("http://api.scraperapi.com?api_key=6c00e107ed8f30e2b131a96266de1bef&url=http://panarcticflora.org")
View(flora)
#Empty Global Enviroment
rm(list = ls())
flora <- read_html("http://api.scraperapi.com?api_key=6c00e107ed8f30e2b131a96266de1bef&url=http://panarcticflora.org")
tables = flora > html_table()
tables = flora %>% html_table()
View(tables)
#Empty Global Enviroment
rm(list = ls())
pacman::p_load(httr, XML, dplyr, xml2, rvest)
flora <- read_html("http://api.scraperapi.com?api_key=6c00e107ed8f30e2b131a96266de1bef&url=http://panarcticflora.org")
tables = flora %>% html_table()
flora <- read_html("http://api.scraperapi.com?api_key=6c00e107ed8f30e2b131a96266de1bef&url=http://panarcticflora.org/flora")
tables = flora %>% html_table()
#Empty Global Enviroment
rm(list = ls())
flora <- read_html("http://panarcticflora.org/distribution")
tables = flora %>% html_table()
View(tables)
arctic_flora <- data.frame(tables[[4]])
View(arctic_flora)
write_xlsx(arctic_flora, "E:/Eranthis/arctic_flora.xlsx")
pacman::p_load(httr, XML, dplyr, xml2, rvest, writexl)
write_xlsx(arctic_flora, "E:/Eranthis/arctic_flora.xlsx")
View(arctic_flora)
View(arctic_flora)
