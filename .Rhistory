part2 <- substr(X2, lengths[1] + 1, lengths[1] + lengths[2]) # Вторая часть
part3 <- substr(X2, lengths[1] + lengths[2] + 1, nchar(X2)) # Третья часть
return(c(part1, part2, part3))
}
split_values <- t(mapply(split_column, arctic_flora$X1, arctic_flora$X2))
split_column <- function(X1, X2) {
lengths <- as.numeric(unlist(strsplit(X1, "")))
part1 <- substr(X2, 1, lengths[1])                   # Первая часть
part2 <- substr(X2, lengths[1] + 1, lengths[1] + lengths[2]) # Вторая часть
part3 <- substr(X2, lengths[1] + lengths[2] + 1, nchar(X2)) # Третья часть
return(c(part1, part2, part3))
}
split_values <- t(mapply(split_column, arctic_flora$X1, arctic_flora$X2))
View(split_values)
split_column <- function(X1, X2) {
lengths <- as.numeric(strsplit(X1, "")[[1]])
part1 <- substr(X2, 1, lengths[1])                   # Первая часть
part2 <- substr(X2, lengths[1] + 1, lengths[1] + lengths[2]) # Вторая часть
part3 <- substr(X2, lengths[1] + lengths[2] + 1, nchar(X2)) # Третья часть
return(c(part1, part2, part3))
}
split_values <- t(mapply(split_column, arctic_flora$X1, arctic_flora$X2, SIMPLIFY = TRUE))
arctic_flora <- data.frame(tables[[4]])
split_column <- function(X1, X2) {
lengths <- as.numeric(strsplit(X1, "")[[1]])
part1 <- substr(X2, 1, lengths[1])                   # Первая часть
part2 <- substr(X2, lengths[1] + 1, lengths[1] + lengths[2]) # Вторая часть
part3 <- substr(X2, lengths[1] + lengths[2] + 1, nchar(X2)) # Третья часть
return(c(part1, part2, part3))
}
split_values <- t(mapply(split_column, arctic_flora$X1, arctic_flora$X2, SIMPLIFY = TRUE))
View(split_values)
arctic_flora$Family <- NA
arctic_flora$Genus <- NA
arctic_flora$Species <- NA
for (i in 1:nrow(arctic_flora)) {
if (arctic_flora$X1[i] == 2) {
arctic_flora$Family[i] <- arctic_flora$X2[i]
} else if (arctic_flora$code[i] == 4) {
arctic_flora$Genus[i] <- arctic_flora$X2[i]
} else {
arctic_flora$Species[i] <- arctic_flora$X2[i]
}
}
View(arctic_flora)
for (i in 1:nrow(arctic_flora)) {
if (arctic_flora$X1[i] == 2) {
arctic_flora$Family[i] <- arctic_flora$X2[i]
} else if (arctic_flora$X1[i] == 4) {
arctic_flora$Genus[i] <- arctic_flora$X2[i]
} else {
arctic_flora$Species[i] <- arctic_flora$X2[i]
}
}
View(arctic_flora)
for (i in 1:nrow(arctic_flora$X1)) {
if (arctic_flora$X1[i] == 2) {
arctic_flora$Family[i] <- arctic_flora$X2[i]
} else if (arctic_flora$X1[i] == 4) {
arctic_flora$Genus[i] <- arctic_flora$X2[i]
} else {
arctic_flora$Species[i] <- arctic_flora$X2[i]
}
}
View(arctic_flora)
for (i in 1:nrow(arctic_flora)) {
if (arctic_flora$X1[i] == 2) {
arctic_flora$Family[i] <- arctic_flora$X2[i]
} else if (arctic_flora$X1[i] == 4) {
arctic_flora$Genus[i] <- arctic_flora$X2[i]
} else {
arctic_flora$Species[i] <- arctic_flora$X2[i]
}
}
View(arctic_flora)
arctic_flora$X1 <- as.numeric(arctic_flora$X1)
for (i in 1:nrow(arctic_flora)) {
if (arctic_flora$X1[i] == 2) {
arctic_flora$Family[i] <- arctic_flora$X2[i]
} else if (arctic_flora$X1[i] == 4) {
arctic_flora$Genus[i] <- arctic_flora$X2[i]
} else {
arctic_flora$Species[i] <- arctic_flora$X2[i]
}
}
for (i in 1:nrow(arctic_flora)) {
if (is.na(arctic_flora$X1[i]) || arctic_flora$X1[i] != 2 && arctic_flora$X1[i] != 4) {
arctic_flora$Species[i] <- arctic_flora$X2[i]
} else if (arctic_flora$X1[i] == 2) {
arctic_flora$Family[i] <- arctic_flora$X2[i]
} else if (arctic_flora$X1[i] == 4) {
arctic_flora$Genus[i] <- arctic_flora$X2[i]
}
}
View(arctic_flora)
arctic_flora <- data.frame(tables[[4]])
arctic_flora$Family <- NA
arctic_flora$Genus <- NA
arctic_flora$Species <- NA
arctic_flora$X1 <- as.numeric(arctic_flora$X1)
for (i in 1:nrow(arctic_flora)) {
if (is.na(arctic_flora$X1[i]) || arctic_flora$X1[i] != 2 && arctic_flora$X1[i] != 4) {
arctic_flora$Species[i] <- arctic_flora$X2[i]
} else if (arctic_flora$X1[i] == 2) {
arctic_flora$Family[i] <- arctic_flora$X2[i]
} else if (arctic_flora$X1[i] == 4) {
arctic_flora$Genus[i] <- arctic_flora$X2[i]
}
}
View(arctic_flora)
count_digits <- function(x) {
sum(grepl("\\d", unlist(strsplit(x, ""))))
}
for (i in 1:nrow(arctic_flora)) {
num_digits <- count_digits(arctic_flora$X1[i])
if (is.na(arctic_flora$X2[i]) || num_digits != 2 && num_digits != 4) {
arctic_flora$Species[i] <- arctic_flora$X2[i]
} else if (num_digits == 2) {
arctic_flora$Family[i] <- arctic_flora$X2[i]
} else if (num_digits == 4) {
arctic_flora$Genus[i] <- arctic_flora$X2[i]
}
}
num_digits <- count_digits(arctic_flora$X2[i])
for (i in 1:nrow(arctic_flora)) {
num_digits <- count_digits(arctic_flora$X2[i])
if (is.na(arctic_flora$X1[i]) || num_digits != 2 && num_digits != 4) {
arctic_flora$Species[i] <- arctic_flora$X2[i]
} else if (num_digits == 2) {
arctic_flora$Family[i] <- arctic_flora$X2[i]
} else if (num_digits == 4) {
arctic_flora$Genus[i] <- arctic_flora$X2[i]
}
}
View(arctic_flora)
arctic_flora <- data.frame(tables[[4]])
arctic_flora$Family <- NA
arctic_flora$Genus <- NA
arctic_flora$Species <- NA
arctic_flora$X1 <- as.numeric(arctic_flora$X1)
count_digits <- function(x) {
sum(grepl("\\d", unlist(strsplit(x, ""))))
}
for (i in 1:nrow(arctic_flora)) {
num_digits <- count_digits(arctic_flora$X2[i])
if (is.na(arctic_flora$X1[i]) || num_digits != 2 && num_digits != 4) {
arctic_flora$Species[i] <- arctic_flora$X2[i]
} else if (num_digits == 2) {
arctic_flora$Family[i] <- arctic_flora$X2[i]
} else if (num_digits == 4) {
arctic_flora$Genus[i] <- arctic_flora$X2[i]
}
}
View(arctic_flora)
# START -----------------------------------------------------------------------------------------------------------
Sys.setenv(LANG = "en_US.UTF-8")
#Library
library(pacman)
pacman::p_load(lubridate, purrr, dplyr, tidyr, forecast, zoo, rlang, ggplot2, tidyverse, raster,
sp, geodata, terra, rasterVis, BiocManager, dismo, XML, jsonlite, rJava,
readxl, factoextra, NbClust, cluster, openxlsx, caret, mice, missForest, knitr, htmltools,
FactoMineR, missMDA, pcaMethods, caret, ggfortify, gridExtra, hrbrthemes, corrplot, caTools,
vegan, pvclust, ClassDiscovery
)
# rgdal, rgbif
pacman::p_load(dplyr, factoextra, fastICA, ggplot2, ggpubr, NMF,  party, psych, randomForest,
reshape2, Rtsne, shipunov, tidyverse, tseries, umap, vegan)
# Decision_Tree
pacman::p_load(datasets, caTools, party, dplyr, magrittr, rattle)
#Empty Global Enviroment
rm(list = ls())
# Read all lists in file
file_path <- "E:/Eranthis/Eranthis_morph.xlsx"
all_sheets <- excel_sheets(file_path)
for (sheet_name in all_sheets) {
var_name <- make.names(sheet_name)
assign(var_name, read_excel(file_path, sheet = sheet_name))
}
#Empty Global Enviroment
rm(list = ls())
# Read all lists in file
file_path <- "E:/Eranthis/Eranthis_morph.xlsx"
all_sheets <- excel_sheets(file_path)
for (sheet_name in all_sheets) {
var_name <- make.names(sheet_name)
assign(var_name, read_excel(file_path, sheet = sheet_name))
}
all_dataframes <- list("E.sibirica", "E.tanhoensis", "E.sibirica_x_E.tanhoensis", "E.krasnoborovii", "E.sineli",
"E.stellata", "E.stellata.Korea.China", "E.pinnatifida", "E.pungdoensis", "E.albiflora",
"E.lobulata", "E.byunsanensis")
#Making One table
tables <- lapply(all_dataframes, get)
tables <- lapply(tables, as.data.frame)
tables <- lapply(tables, function(tbl) mutate_all(tbl, as.character))
tables <- lapply(seq_along(all_dataframes), function(i) {
df <- get(all_dataframes[[i]])
df <- as.data.frame(mutate_all(df, as.character))
df <- df[complete.cases(df$Species), ]
df$Species <- all_dataframes[[i]]
return(df)
})
combined_data <- bind_rows(tables)
View(combined_data)
View(combined_data)
combined_data <- combined_data[, -c(1,3,37) ]
View(combined_data)
combined_data <- combined_data %>%
mutate_at(vars(2:34), ~as.numeric(.))
#1,3,15,17,19,23,29,30,31
model_fr <- combined_data[ , c(1,3,5,7,9,13,15,17,19,21,23,29,30,31,33,34)]
filter <- apply(model_fr[, -1], 1, function(row) !all(is.na(row)))
model_fr <- model_fr[filter, ]
model_fr<- na.omit(model_fr)
#1,3,15,17,19,23,29,30,31
model_fr <- combined_data[ , c(1,3,5,7,9,13,15,17,19,21,23,29,30,31,33,34)]
View(model_fr)
filter <- apply(model_fr[, -1], 1, function(row) !all(is.na(row)))
model_fr <- model_fr[filter, ]
model_fl <- combined_data[ , c(1,2,4,6,8,12,14,16,18,20,22,24,25,26,27,28,32)]
filter <- apply(model_fl[, -1], 1, function(row) !all(is.na(row)))
model_fl <- model_fl[filter, ]
model_fl <- na.omit(model_fl)
model_fl <- combined_data[ , c(1,2,4,6,8,12,14,16,18,20,22,24,25,26,27,28,32)]
filter <- apply(model_fl[, -1], 1, function(row) !all(is.na(row)))
model_fl <- model_fl[filter, ]
res.pca <- PCA(model_fl, quali.sup = 1, graph = FALSE, ncp = 5)
fviz_pca_biplot(res.pca, label = "var", habillage = 1, col.var = "black",
addEllipses = TRUE, pointsize = 3, ellipse.level = 0.95,
mean.point = FALSE, ellipse.alpha = 0, repel = TRUE) +
scale_color_brewer(palette = "Set1") +
theme_minimal()
fviz_pca_biplot(res.pca, label = "var", col.var = "black",
addEllipses = TRUE, pointsize = 3, ellipse.level = 0.95,
mean.point = FALSE, ellipse.alpha = 0, repel = TRUE) +
scale_color_brewer(palette = "Set1") +
theme_minimal()
fviz_pca_biplot(res.pca, label = "var", habillage = 1, col.var = "black",
addEllipses = TRUE, pointsize = 3, ellipse.level = 0.95,
mean.point = FALSE, ellipse.alpha = 0, repel = TRUE) +
scale_color_brewer(palette = "Set1") +
theme_minimal()
fviz_pca_ind(res.pca, label = "var", habillage = 1, col.var = "black",
addEllipses = TRUE, pointsize = 3, ellipse.level = 0.95,
mean.point = FALSE, ellipse.alpha = 0, repel = TRUE)
fviz_pca_var(res.pca, col.var="black")+
theme_minimal()
fviz_eig(res.pca)
get_pca(res.pca)$contrib
fviz_pca_contrib(res.pca, choice = c("var"))
res.pca$eig
fviz_contrib(res.pca, choice = "var", axes = 1:2)
fviz_cos2(res.pca, choice = "var", axes = 1:2)
# START -----------------------------------------------------------------------------------------------------------
Sys.setenv(LANG = "en_US.UTF-8")
#Library
library(pacman)
pacman::p_load(lubridate, purrr, dplyr, tidyr, forecast, zoo, rlang, ggplot2, tidyverse, raster,
sp, geodata, terra, rasterVis, BiocManager, dismo, XML, jsonlite, rJava,
readxl, factoextra, NbClust, cluster, openxlsx, caret, mice, missForest, knitr, htmltools,
FactoMineR, missMDA, pcaMethods, caret, ggfortify, gridExtra, hrbrthemes, corrplot, caTools,
vegan, pvclust, ClassDiscovery
)
# rgdal, rgbif
pacman::p_load(dplyr, factoextra, fastICA, ggplot2, ggpubr, NMF,  party, psych, randomForest,
reshape2, Rtsne, shipunov, tidyverse, tseries, umap, vegan)
# Decision_Tree
pacman::p_load(datasets, caTools, party, dplyr, magrittr, rattle)
#Empty Global Enviroment
rm(list = ls())
# Read all lists in file
file_path <- "E:/Eranthis/Eranthis_morph.xlsx"
all_sheets <- excel_sheets(file_path)
for (sheet_name in all_sheets) {
var_name <- make.names(sheet_name)
assign(var_name, read_excel(file_path, sheet = sheet_name))
}
all_dataframes <- list("E.sibirica", "E.tanhoensis", "E.sibirica_x_E.tanhoensis", "E.krasnoborovii", "E.sineli",
"E.stellata", "E.stellata.Korea.China", "E.pinnatifida", "E.pungdoensis", "E.albiflora",
"E.lobulata", "E.byunsanensis")
#Making One table
tables <- lapply(all_dataframes, get)
tables <- lapply(tables, as.data.frame)
tables <- lapply(tables, function(tbl) mutate_all(tbl, as.character))
tables <- lapply(seq_along(all_dataframes), function(i) {
df <- get(all_dataframes[[i]])
df <- as.data.frame(mutate_all(df, as.character))
df <- df[complete.cases(df$Species), ]
df$Species <- all_dataframes[[i]]
return(df)
})
combined_data <- bind_rows(tables)
combined_data <- combined_data[, -c(1,3,37) ]
combined_data <- combined_data %>%
mutate_at(vars(2:34), ~as.numeric(.))
#1,3,15,17,19,23,29,30,31
model_fr <- combined_data[ , c(1,3,5,7,9,13,15,17,19,21,23,29,30,31,33,34)]
filter <- apply(model_fr[, -1], 1, function(row) !all(is.na(row)))
model_fr <- model_fr[filter, ]
model_fr<- na.omit(model_fr)
model_fl <- combined_data[ , c(1,2,4,6,8,12,14,16,18,20,22,24,25,26,27,28,32)]
filter <- apply(model_fl[, -1], 1, function(row) !all(is.na(row)))
model_fl <- model_fl[filter, ]
model_fl <- na.omit(model_fl)
res.pca <- PCA(model_fr, quali.sup=c(1), graph =  FALSE)
fviz_pca_biplot(res.pca, label = "var", habillage = 1, addEllipses = TRUE, pointsize = 2,
ellipse.level = 0.95, geom.ind = "point", ggtheme = theme_minimal()) +
scale_color_brewer(palette = "Set1")
pca_res <- prcomp(model_fr[,2:11], scale. = TRUE)
autoplot(pca_res, data = model_fr, colour = 'Species',  loadings = TRUE, loadings.colour = 'blue',
loadings.label = TRUE, loadings.label.size = 3, addEllipses=TRUE)
res.pca <- PCA(model_fl, quali.sup = 1, graph = FALSE, ncp = 5)
fviz_pca_biplot(res.pca, label = "var", habillage = 1, col.var = "black",
addEllipses = TRUE, pointsize = 3, ellipse.level = 0.95,
mean.point = FALSE, ellipse.alpha = 0, repel = TRUE) +
scale_color_brewer(palette = "Set1") +
theme_minimal()
fviz_pca_ind(res.pca, label = "var", habillage = 1, col.var = "black",
addEllipses = TRUE, pointsize = 3, ellipse.level = 0.95,
mean.point = FALSE, ellipse.alpha = 0, repel = TRUE)
fviz_pca_var(res.pca, col.var="black")+
theme_minimal()
fviz_eig(res.pca)
fviz_pca_biplot(res.pca, label = "var", habillage = 1, col.var = "black",
addEllipses = TRUE, pointsize = 3, ellipse.level = 0.95,
mean.point = FALSE, ellipse.alpha = 0, repel = TRUE) +
scale_color_brewer(palette = "Set1") +
theme_minimal()
get_pca(res.pca)$contrib
fviz_pca_contrib(res.pca, choice = c("var"))
fviz_pca_biplot(res.pca, label = "var", habillage = 1, col.var = "black",
addEllipses = TRUE, pointsize = 3, ellipse.level = 0.95,
mean.point = FALSE, ellipse.alpha = 0, repel = TRUE) +
scale_color_brewer(palette = "Set1") +
theme_minimal()
fviz_pca_ind(res.pca, label = "var", habillage = 1, col.var = "black",
addEllipses = TRUE, pointsize = 3, ellipse.level = 0.95,
mean.point = FALSE, ellipse.alpha = 0, repel = TRUE)
fviz_pca_biplot(res.pca, label = "var", habillage = 1, col.var = "black",
addEllipses = TRUE, pointsize = 3, ellipse.level = 0.95,
mean.point = FALSE, ellipse.alpha = 0, repel = TRUE) +
scale_color_brewer(palette = "Set1") +
theme_minimal()
View(model_fl)
View(E.albiflora)
target_species <- c('E.sibirica', 'E.tanhoensis', 'E.sibirica_x_E.tanhoensis')
filtered_data <- data_rep[data_rep$Species %in% target_species, ]
res.pca <- PCA(filtered_data, quali.sup = 1, graph = FALSE, ncp = 5)
filtered_data <- model_fl[model_fl$Species %in% target_species, ]
res.pca <- PCA(filtered_data, quali.sup = 1, graph = FALSE, ncp = 5)
fviz_pca_biplot(res.pca, label = "var", habillage = 1, col.var = "black",
addEllipses = TRUE, pointsize = 3, ellipse.level = 0.95,
mean.point = FALSE, ellipse.alpha = 0, repel = TRUE) +
scale_color_brewer(palette = "Set1") +
theme_minimal()
fviz_pca_biplot(res.pca, label = "var", habillage = 1, col.var = "black",
addEllipses = TRUE, pointsize = 3, ellipse.level = 0.95,
mean.point = FALSE, ellipse.alpha = 0, repel = TRUE) +
scale_color_brewer(palette = "Set1") +
theme_minimal()
res.pca <- PCA(model_fl, quali.sup = 1, graph = FALSE, ncp = 5)
fviz_pca_biplot(res.pca, label = "var", habillage = 1, col.var = "black",
addEllipses = TRUE, pointsize = 3, ellipse.level = 0.95,
mean.point = FALSE, ellipse.alpha = 0, repel = TRUE) +
scale_color_brewer(palette = "Set1") +
theme_minimal()
fviz_pca_biplot(res.pca, label = "var", habillage = 1, col.var = "black",
addEllipses = TRUE, pointsize = 3, ellipse.level = 0.95,
mean.point = FALSE, ellipse.alpha = 0, repel = TRUE)
res.pca <- PCA(filtered_data, quali.sup = 1, graph = FALSE, ncp = 5)
fviz_pca_biplot(res.pca, label = "var", habillage = 1, col.var = "black",
addEllipses = TRUE, pointsize = 3, ellipse.level = 0.95,
mean.point = FALSE, ellipse.alpha = 0, repel = TRUE) +
scale_color_brewer(palette = "Set1") +
theme_minimal()
fviz_eig(res.pca)
get_pca(res.pca)$contrib
fviz_pca_contrib(res.pca, choice = c("var"))
target_species <- c('E.sibirica', 'E.tanhoensis', 'E.krasnoborovii', 'E.sineli', 'E.stellata', 'E.stellata.Korea.China')
filtered_data <- model_fl[model_fl$Species %in% target_species, ]
res.pca <- PCA(filtered_data, quali.sup = 1, graph = FALSE, ncp = 5)
fviz_pca_biplot(res.pca, label = "var", habillage = 1, col.var = "black",
addEllipses = TRUE, pointsize = 3, ellipse.level = 0.95,
mean.point = FALSE, ellipse.alpha = 0, repel = TRUE) +
scale_color_brewer(palette = "Set1") +
theme_minimal()
fviz_pca_var(res.pca, col.var="black")+
theme_minimal()
fviz_eig(res.pca)
get_pca(res.pca)$contrib
fviz_pca_contrib(res.pca, choice = c("var"))
fviz_eig(res.pca)
target_species <- c('E.albiflora', 'E.lobulata')
filtered_data <- model_fr[model_fr$Species %in% target_species, ]
res.pca <- PCA(filtered_data, quali.sup = 1, graph = FALSE, ncp = 5)
fviz_pca_biplot(res.pca, label = "var", habillage = 1, col.var = "black",
addEllipses = TRUE, pointsize = 3, ellipse.level = 0.95,
mean.point = FALSE, ellipse.alpha = 0, repel = TRUE) +
scale_color_brewer(palette = "Set1") +
theme_minimal()
fviz_eig(res.pca)
get_pca(res.pca)$contrib
fviz_pca_contrib(res.pca, choice = c("var"))
# START -----------------------------------------------------------------------------------------------------------
Sys.setenv(LANG = "en_US.UTF-8")
#Library
library(pacman)
pacman::p_load(lubridate, purrr, dplyr, tidyr, forecast, zoo, rlang, ggplot2, tidyverse, raster,
sp, geodata, terra, rasterVis, BiocManager, dismo, XML, jsonlite, rJava,
readxl, factoextra, NbClust, cluster, openxlsx, caret, mice, missForest, knitr, htmltools,
FactoMineR, missMDA, pcaMethods, caret, ggfortify, gridExtra, hrbrthemes, corrplot, caTools,
vegan, pvclust, ClassDiscovery
)
# rgdal, rgbif
pacman::p_load(dplyr, factoextra, fastICA, ggplot2, ggpubr, NMF,  party, psych, randomForest,
reshape2, Rtsne, shipunov, tidyverse, tseries, umap, vegan)
# Decision_Tree
pacman::p_load(datasets, caTools, party, dplyr, magrittr, rattle)
#Empty Global Enviroment
rm(list = ls())
# Read all lists in file
file_path <- "E:/Eranthis/Eranthis_morph.xlsx"
all_sheets <- excel_sheets(file_path)
for (sheet_name in all_sheets) {
var_name <- make.names(sheet_name)
assign(var_name, read_excel(file_path, sheet = sheet_name))
}
all_dataframes <- list("E.sibirica", "E.tanhoensis", "E.sibirica_x_E.tanhoensis", "E.krasnoborovii", "E.sineli",
"E.stellata", "E.stellata.Korea.China", "E.pinnatifida", "E.pungdoensis", "E.albiflora",
"E.lobulata", "E.byunsanensis")
mising_value <- function(data_p, nx){
pr_names<-c("y")
for(i in 2:ncol(data_p)) pr_names<-c(pr_names, paste("x", i-1, sep=""))
colnames(data_p)<-pr_names
f<-paste(pr_names[1], "~", sep="")
for(i in 2:length(pr_names)) f<-paste(f, "+", pr_names[i], sep="")
f<-as.formula(f)
fit <- lm(f, data=data_p)
newdata=data.frame(x=nx[1])
for(i in 2:length(nx)) newdata<-cbind(newdata, c(nx[i]))
colnames(newdata)<-pr_names[2:length(pr_names)]
predict(fit, newdata)[[1]]
}
View(E.albiflora)
View(E.albiflora)
E.albiflora <- E.albiflora[,-c(1,3)]
pop <- E.albiflora[,1]
data <- E.albiflora[,-c(1)]
data_rep <- data
for (i in 1:ncol(data)) {
for (j in 1:nrow(data)) {
if (is.na(data[j, i])) {
yd <- data[, i]
nx <- as.numeric(data[j, ])
nx <- nx[!is.na(nx)]
na_index <- which(!is.na(data[j, , drop = FALSE]))
data_p <- data[, na_index]
data_p <- cbind(y = yd, data_p)
data_p <- data_p[rowSums(is.na(data_p)) == 0, ]
data_rep[j,i] <- mising_value(data_p, nx)
}
}
}
View(data)
E.albiflora_fr <- E.albiflora[ , c(1,3,5,7,9,13,15,17,19,21,23,29,30,31,33,34)]
E.albiflora_fl <- E.albiflora[ , c(1,2,4,6,8,12,14,16,18,20,22,24,25,26,27,28,32)]
E.albiflora_fr <- E.albiflora[ , c(1,3,5,7,9,13,15,17,19,21,23,29,30,31,33,34)]
E.albiflora_fl <- E.albiflora[ , c(1,2,4,6,8,12,14,16,18,20,22,24,25,26,27,28,32)]
View(E.albiflora_fl)
pop <- E.albiflora_fr[,1]
data <- E.albiflora_fr[,-c(1)]
data_rep <- data
for (i in 1:ncol(data)) {
for (j in 1:nrow(data)) {
if (is.na(data[j, i])) {
yd <- data[, i]
nx <- as.numeric(data[j, ])
nx <- nx[!is.na(nx)]
na_index <- which(!is.na(data[j, , drop = FALSE]))
data_p <- data[, na_index]
data_p <- cbind(y = yd, data_p)
data_p <- data_p[rowSums(is.na(data_p)) == 0, ]
data_rep[j,i] <- mising_value(data_p, nx)
}
}
}
# START -----------------------------------------------------------------------------------------------------------
Sys.setenv(LANG = "en_US.UTF-8")
#Library
library(pacman)
pacman::p_load(lubridate, purrr, dplyr, tidyr, forecast, zoo, rlang, ggplot2, tidyverse, raster,
sp, geodata, terra, rasterVis, BiocManager, dismo, XML, jsonlite, rJava,
readxl, factoextra, NbClust, cluster, openxlsx, caret, mice, missForest, knitr, htmltools,
FactoMineR, missMDA, pcaMethods, caret, ggfortify, gridExtra, hrbrthemes, corrplot, caTools,
vegan, pvclust, ClassDiscovery
)
# rgdal, rgbif
pacman::p_load(dplyr, factoextra, fastICA, ggplot2, ggpubr, NMF,  party, psych, randomForest,
reshape2, Rtsne, shipunov, tidyverse, tseries, umap, vegan)
# Decision_Tree
pacman::p_load(datasets, caTools, party, dplyr, magrittr, rattle)
#Empty Global Enviroment
rm(list = ls())
# Read all lists in file
file_path <- "E:/Eranthis/Eranthis_morph.xlsx"
all_sheets <- excel_sheets(file_path)
for (sheet_name in all_sheets) {
var_name <- make.names(sheet_name)
assign(var_name, read_excel(file_path, sheet = sheet_name))
}
all_dataframes <- list("E.sibirica", "E.tanhoensis", "E.sibirica_x_E.tanhoensis", "E.krasnoborovii", "E.sineli",
"E.stellata", "E.stellata.Korea.China", "E.pinnatifida", "E.pungdoensis", "E.albiflora",
"E.lobulata", "E.byunsanensis")
