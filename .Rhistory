theme_minimal()
target_species <- c('E.sibirica', 'E.tanhoensis', 'E.sibirica_x_E.tanhoensis', 'E.krasnoborovii', 'E.sineli')
filtered_data <- data_rep[data_rep$Species %in% target_species, ]
res.pca <- PCA(filtered_data, quali.sup = 1, graph = FALSE, ncp = 2)
fviz_pca_biplot(res.pca, label = "var", habillage = 1, col.var = "black",
addEllipses = TRUE, pointsize = 3, ellipse.level = 0.95,
mean.point = FALSE, ellipse.alpha = 0, repel = TRUE) +
scale_color_brewer(palette = "Set1") +
theme_minimal()
View(data_rep)
filtered_data <- data_rep[data_rep$Species %in% target_species, ]
res.pca <- PCA(filtered_data, quali.sup = 1, graph = FALSE, ncp = 2)
fviz_pca_biplot(res.pca, label = "var", habillage = 1, col.var = "black",
addEllipses = TRUE, pointsize = 3, ellipse.level = 0.95,
mean.point = FALSE, ellipse.alpha = 0, repel = TRUE) +
scale_color_brewer(palette = "Set1") +
theme_minimal()
target_species <- c('E.sineli', 'E.stellata', 'E.stellata.Korea.')
filtered_data <- data_rep[data_rep$Species %in% target_species, ]
res.pca <- PCA(filtered_data, quali.sup = 1, graph = FALSE, ncp = 2)
fviz_pca_biplot(res.pca, label = "var", habillage = 1, col.var = "black",
addEllipses = TRUE, pointsize = 3, ellipse.level = 0.95,
mean.point = FALSE, ellipse.alpha = 0, repel = TRUE) +
scale_color_brewer(palette = "Set1") +
theme_minimal()
target_species <- c('E.stellata', 'E.stellata.Korea.')
filtered_data <- data_rep[data_rep$Species %in% target_species, ]
res.pca <- PCA(filtered_data, quali.sup = 1, graph = FALSE, ncp = 2)
fviz_pca_biplot(res.pca, label = "var", habillage = 1, col.var = "black",
addEllipses = TRUE, pointsize = 3, ellipse.level = 0.95,
mean.point = FALSE, ellipse.alpha = 0, repel = TRUE) +
scale_color_brewer(palette = "Set1") +
theme_minimal()
target_species <- c('E.albiflora', 'E.lobulata')
filtered_data <- data_rep[data_rep$Species %in% target_species, ]
res.pca <- PCA(filtered_data, quali.sup = 1, graph = FALSE, ncp = 2)
fviz_pca_biplot(res.pca, label = "var", habillage = 1, col.var = "black",
addEllipses = TRUE, pointsize = 3, ellipse.level = 0.95,
mean.point = FALSE, ellipse.alpha = 0, repel = TRUE) +
scale_color_brewer(palette = "Set1") +
theme_minimal()
target_species <- c('E.pinnatifida', 'E.byunsanensis', 'E.pungdoensis')
filtered_data <- data_rep[data_rep$Species %in% target_species, ]
res.pca <- PCA(filtered_data, quali.sup = 1, graph = FALSE, ncp = 2)
fviz_pca_biplot(res.pca, label = "var", habillage = 1, col.var = "black",
addEllipses = TRUE, pointsize = 3, ellipse.level = 0.95,
mean.point = FALSE, ellipse.alpha = 0, repel = TRUE) +
scale_color_brewer(palette = "Set1") +
theme_minimal()
target_species <- c('E.byunsanensis', 'E.pungdoensis')
filtered_data <- data_rep[data_rep$Species %in% target_species, ]
res.pca <- PCA(filtered_data, quali.sup = 1, graph = FALSE, ncp = 2)
fviz_pca_biplot(res.pca, label = "var", habillage = 1, col.var = "black",
addEllipses = TRUE, pointsize = 3, ellipse.level = 0.95,
mean.point = FALSE, ellipse.alpha = 0, repel = TRUE) +
scale_color_brewer(palette = "Set1") +
theme_minimal()
target_species <- c('E.albiflora', 'E.lobulata', 'E.sibirica', 'E.tanhoensis', 'E.stellata', 'E.pinnatifida', 'E.byunsanensis')
filtered_data <- data_rep[data_rep$Species %in% target_species, ]
res.pca <- PCA(filtered_data, quali.sup = 1, graph = FALSE, ncp = 2)
fviz_pca_biplot(res.pca, label = "var", habillage = 1, col.var = "black",
addEllipses = TRUE, pointsize = 3, ellipse.level = 0.95,
mean.point = FALSE, ellipse.alpha = 0, repel = TRUE) +
scale_color_brewer(palette = "Set1") +
theme_minimal()
# START -----------------------------------------------------------------------------------------------------------
Sys.setenv(LANG = "en_US.UTF-8")
#Library
library(pacman)
pacman::p_load(lubridate, purrr, dplyr, tidyr, forecast, zoo, rlang, ggplot2, tidyverse, raster,
sp, geodata, terra, rasterVis, BiocManager, dismo, XML, jsonlite, rgdal, rJava,
readxl, rgbif, factoextra, NbClust, cluster, openxlsx, caret, mice, missForest, knitr, htmltools,
FactoMineR, missMDA, pcaMethods, caret, ggfortify, gridExtra, hrbrthemes, corrplot, mice,
caTools, vegan, pvclust
)
#Empty Global Enviroment
rm(list = ls())
# Read all lists in file
file_path <- "E:/Eranthis/Eranthis_morph.xlsx"
all_sheets <- excel_sheets(file_path)
for (sheet_name in all_sheets) {
var_name <- make.names(sheet_name)
assign(var_name, read_excel(file_path, sheet = sheet_name))
}
all_dataframes <- list("E.sibirica", "E.tanhoensis", "E.sibirica_x_E.tanhoensis", "E.krasnoborovii", "E.sineli",
"E.stellata", "E.stellata.Korea.", "E.pinnatifida", "E.pungdoensis", "E.albiflora",
"E.lobulata", "E.byunsanensis")
#Making One table
tables <- lapply(all_dataframes, get)
tables <- lapply(tables, as.data.frame)
tables <- lapply(tables, function(tbl) mutate_all(tbl, as.character))
tables <- lapply(seq_along(all_dataframes), function(i) {
df <- get(all_dataframes[[i]])
df <- as.data.frame(mutate_all(df, as.character))
df <- df[complete.cases(df$Species), ]
df$Species <- all_dataframes[[i]]
return(df)
})
combined_data <- bind_rows(tables)
combined_data <- combined_data[, -c(1,3,34:44,48) ]
combined_data <- combined_data %>%
mutate_at(vars(2:34), ~as.numeric(.))
#1,3,15,17,19,23,29,30,31
model_fr <- combined_data[ , c(1,3,5,7,9,13,15,17,19,21,23,29,30,31,33,34)]
filter <- apply(model_fr[, -1], 1, function(row) !all(is.na(row)))
model_fr <- model_fr[filter, ]
model_fl <- combined_data[ , c(1,2,4,6,8,12,14,16,18,20,22,24,25,26,27,28,32)]
filter <- apply(model_fl[, -1], 1, function(row) !all(is.na(row)))
model_fl <- model_fl[filter, ]
mising_value <- function(data_p, nx){
pr_names<-c("y")
for(i in 2:ncol(data_p)) pr_names<-c(pr_names, paste("x", i-1, sep=""))
colnames(data_p)<-pr_names
f<-paste(pr_names[1], "~", sep="")
for(i in 2:length(pr_names)) f<-paste(f, "+", pr_names[i], sep="")
f<-as.formula(f)
fit <- lm(f, data=data_p)
newdata=data.frame(x=nx[1])
for(i in 2:length(nx)) newdata<-cbind(newdata, c(nx[i]))
colnames(newdata)<-pr_names[2:length(pr_names)]
predict(fit, newdata)[[1]]
}
pop <- model_fr[,1]
data <- model_fr[,-c(1)]
data_rep <- data
for (i in 1:ncol(data)) {
for (j in 1:nrow(data)) {
if (is.na(data[j, i])) {
yd <- data[, i]
nx <- as.numeric(data[j, ])
nx <- nx[!is.na(nx)]
na_index <- which(!is.na(data[j, , drop = FALSE]))
data_p <- data[, na_index]
data_p <- cbind(y = yd, data_p)
data_p <- data_p[rowSums(is.na(data_p)) == 0, ]
data_rep[j,i] <- mising_value(data_p, nx)
}
}
}
data_rep<-cbind(pop=pop, data_rep)
data_rep <- data_rep %>% rename(Species = pop)
res.pca <- PCA(data_rep, quali.sup = 1, graph = FALSE, ncp = 2)
fviz_pca_ind(res.pca, label = "var", habillage = 1, col.var = "black",
addEllipses = TRUE, pointsize = 3, ellipse.level = 0.95,
mean.point = FALSE, ellipse.alpha = 0, repel = TRUE) +
scale_color_brewer(palette = "Set1") +
theme_minimal()
fviz_pca_ind(res.pca, label = "var", habillage = 1, col.var = "black",
addEllipses = TRUE, pointsize = 3, ellipse.level = 0.95,
mean.point = FALSE, ellipse.alpha = 0, repel = TRUE)
fviz_pca_var(res.pca, label = "var", habillage = 1, col.var = "black",
addEllipses = TRUE, pointsize = 3, ellipse.level = 0.95,
mean.point = FALSE, ellipse.alpha = 0, repel = TRUE)
fviz_pca_var(res.pca, label = "var", habillage = 1, col.var = "black",
addEllipses = TRUE, pointsize = 3, ellipse.level = 0.95,
mean.point = FALSE, ellipse.alpha = 0, repel = TRUE)  +
scale_color_brewer(palette = "Set1") +
theme_minimal()
fviz_pca_var(res.pca, label = "var", habillage = 1, repel = TRUE)
fviz_pca_var(res.pca, col.var="steelblue")+
theme_minimal()
fviz_pca_var(res.pca, col.var="black")+
theme_minimal()
fviz_pca_var(res.pca, col.var="black")+
theme_minimal()
mising_value <- function(data_p, nx){
pr_names<-c("y")
for(i in 2:ncol(data_p)) pr_names<-c(pr_names, paste("x", i-1, sep=""))
colnames(data_p)<-pr_names
f<-paste(pr_names[1], "~", sep="")
for(i in 2:length(pr_names)) f<-paste(f, "+", pr_names[i], sep="")
f<-as.formula(f)
fit <- lm(f, data=data_p)
newdata=data.frame(x=nx[1])
for(i in 2:length(nx)) newdata<-cbind(newdata, c(nx[i]))
colnames(newdata)<-pr_names[2:length(pr_names)]
predict(fit, newdata)[[1]]
}
pop <- model_fl[,1]
data <- model_fl[,-c(1)]
data_rep <- data
for (i in 1:ncol(data)) {
for (j in 1:nrow(data)) {
if (is.na(data[j, i])) {
yd <- data[, i]
nx <- as.numeric(data[j, ])
nx <- nx[!is.na(nx)]
na_index <- which(!is.na(data[j, , drop = FALSE]))
data_p <- data[, na_index]
data_p <- cbind(y = yd, data_p)
data_p <- data_p[rowSums(is.na(data_p)) == 0, ]
data_rep[j,i] <- mising_value(data_p, nx)
}
}
}
data_rep<-cbind(pop=pop, data_rep)
data_rep <- data_rep %>% rename(Species = pop)
res.pca <- PCA(data_rep, quali.sup = 1, graph = FALSE, ncp = 2)
fviz_pca_ind(res.pca, label = "var", habillage = 1, col.var = "black",
addEllipses = TRUE, pointsize = 3, ellipse.level = 0.95,
mean.point = FALSE, ellipse.alpha = 0, repel = TRUE)
fviz_pca_var(res.pca, col.var="black")+
theme_minimal()
# START -----------------------------------------------------------------------------------------------------------
Sys.setenv(LANG = "en_US.UTF-8")
#Library
library(pacman)
pacman::p_load(lubridate, purrr, dplyr, tidyr, forecast, zoo, rlang, ggplot2, tidyverse, raster,
sp, geodata, terra, rasterVis, BiocManager, dismo, XML, jsonlite, rgdal, rJava,
readxl, rgbif, factoextra, NbClust, cluster, openxlsx, caret, mice, missForest, knitr, htmltools,
FactoMineR, missMDA, pcaMethods, caret, ggfortify, gridExtra, hrbrthemes, corrplot, mice,
caTools, vegan, pvclust
)
#Empty Global Enviroment
rm(list = ls())
# Read all lists in file
file_path <- "E:/Eranthis/Eranthis_morph.xlsx"
all_sheets <- excel_sheets(file_path)
for (sheet_name in all_sheets) {
var_name <- make.names(sheet_name)
assign(var_name, read_excel(file_path, sheet = sheet_name))
}
all_dataframes <- list("E.sibirica", "E.tanhoensis", "E.sibirica_x_E.tanhoensis", "E.krasnoborovii", "E.sineli",
"E.stellata", "E.stellata.Korea.", "E.pinnatifida", "E.pungdoensis", "E.albiflora",
"E.lobulata", "E.byunsanensis")
#Making One table
tables <- lapply(all_dataframes, get)
tables <- lapply(tables, as.data.frame)
tables <- lapply(tables, function(tbl) mutate_all(tbl, as.character))
tables <- lapply(seq_along(all_dataframes), function(i) {
df <- get(all_dataframes[[i]])
df <- as.data.frame(mutate_all(df, as.character))
df <- df[complete.cases(df$Species), ]
df$Species <- all_dataframes[[i]]
return(df)
})
combined_data <- bind_rows(tables)
combined_data <- combined_data[, -c(1,3,34:44,48) ]
combined_data <- combined_data %>%
mutate_at(vars(2:34), ~as.numeric(.))
ggplot(combined_data, aes(x = Species, y = PHfl)) +
geom_boxplot() +
labs(y = "Название оси Y") + # Замените "Название оси Y" на подходящий заголовок для оси Y
theme_minimal()
ggplot(combined_data, aes(x = Species, y = PHfr)) +
geom_boxplot() +
geom_jitter(aes(color = Species), width = 0.2) + # Добавление рассеянных точек для каждой группы
labs(y = "Название оси Y") + # Замените "Название оси Y" на подходящий заголовок для оси Y
theme_minimal()
ggplot(combined_data, aes(x = Species, y = PHfl)) +
geom_boxplot() +
labs(y = "Название оси Y") +
theme_minimal() +
facet_wrap(~Species, scales = "free")
plot1 <- ggplot(combined_data, aes(x = Species, y = PHfl)) +
geom_boxplot() +
labs(y = "Название оси Y") +
theme_minimal()
plot2 <- ggplot(combined_data, aes(x = Species, y = PHfr)) +
geom_boxplot() +
labs(y = "Название оси Y") +
theme_minimal()
grid.arrange(plot1, plot2, ncol = 2)
grid.arrange(plot1, plot2, nrow = 1, layout_matrix = matrix(c(1, 2), nrow = 1))
ggplot(combined_data, aes(x = Species)) +
geom_boxplot(aes(y = PHfl, fill = "PHfl"), position = position_dodge(width = 0.75)) +
geom_boxplot(aes(y = PHfr, fill = "PHfr"), position = position_dodge(width = 0.75)) +
labs(y = "Название оси Y", fill = "Данные") +
theme_minimal()
ggplot(combined_data, aes(x = Species, fill = factor(Column))) +
geom_boxplot(aes(y = PHfl)) +
geom_boxplot(aes(y = PHfr)) +
labs(y = "Название оси Y", fill = "Данные") +
theme_minimal()
ggplot(combined_data, aes(x = Species, fill = factor(combined_data$Species))) +
geom_boxplot(aes(y = PHfl)) +
geom_boxplot(aes(y = PHfr)) +
labs(y = "Название оси Y", fill = "Данные") +
theme_minimal()
ggplot(data, aes(x = Species, y = value, fill = variable)) +
geom_boxplot(position = position_dodge(width = 0.8), width = 0.5) +
scale_fill_manual(values = c("PHfl" = "slateblue1", "PHfr" = "tomato"), name = "Данные") +
labs(y = "sickness", title = "sickness of several wheat lines") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
scale_x_discrete(labels = c("first", "second", "third", "fourth"))
# Plotting --------------------------------------------------------------------------------------------------------
data <- reshape2::melt(data, id.vars = "Species")
View(data)
# Plotting --------------------------------------------------------------------------------------------------------
data <- reshape2::melt(data, id.vars = "Species")
# Plotting --------------------------------------------------------------------------------------------------------
data <- reshape2::melt(combined_data, id.vars = "Species")
View(data)
ggplot(data, aes(x = Species, y = value, fill = variable)) +
geom_boxplot(position = position_dodge(width = 0.8), width = 0.5) +
scale_fill_manual(values = c("PHfl" = "slateblue1", "PHfr" = "tomato"), name = "Данные") +
labs(y = "sickness", title = "sickness of several wheat lines") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
scale_x_discrete(labels = c("first", "second", "third", "fourth"))
ggplot(data, aes(x = Species, y = value, fill = variable)) +
geom_boxplot(position = position_dodge(width = 0.8), width = 0.5) +
scale_fill_manual(values = c("PHfl" = "slateblue1", "PHfr" = "tomato"), name = "Данные") +
theme_minimal()
ggplot(data, aes(x = Species, y = value, fill = variable)) +
geom_boxplot(data = subset(data, variable %in% c("PHfl", "PHfr")),
position = position_dodge(width = 0.8), width = 0.5) +
scale_fill_manual(values = c("PHfl" = "slateblue1", "PHfr" = "tomato"), name = "Данные") +
theme_minimal()
ggplot(data, aes(x = Species, y = value, fill = variable)) +
geom_boxplot(data = subset(data, variable %in% c("PHfl", "PHfr")),
position = position_dodge(width = 0.8), width = 0.5) +
scale_fill_manual(values = c("PHfl" = "slateblue1", "PHfr" = "tomato"), name = "Данные") +
theme_minimal()
# START -----------------------------------------------------------------------------------------------------------
Sys.setenv(LANG = "en_US.UTF-8")
#Library
library(pacman)
pacman::p_load(lubridate, purrr, dplyr, tidyr, forecast, zoo, rlang, ggplot2, tidyverse, raster,
sp, geodata, terra, rasterVis, BiocManager, dismo, XML, jsonlite, rgdal, rJava,
readxl, rgbif, factoextra, NbClust, cluster, openxlsx, caret, mice, missForest, knitr, htmltools,
FactoMineR, missMDA, pcaMethods, caret, ggfortify, gridExtra, hrbrthemes, corrplot, mice,
caTools, vegan, pvclust
)
ggplot(data, aes(x = Species, y = value, fill = variable)) +
geom_boxplot(data = subset(data, variable %in% c("PHfl", "PHfr")),
position = position_dodge(width = 0.8), width = 0.5) +
scale_fill_manual(values = c("PHfl" = "slateblue1", "PHfr" = "tomato"), name = "Данные") +
theme_minimal()
data <- reshape2::melt(data, id.vars = "Species")
data <- reshape2::melt(combined_data, id.vars = "Species")
ggplot(data, aes(x = Species, y = value, fill = variable)) +
geom_boxplot(data = subset(data, variable %in% c("PHfl", "PHfr")),
position = position_dodge(width = 0.8), width = 0.5) +
scale_fill_manual(values = c("PHfl" = "slateblue1", "PHfr" = "tomato"), name = "Данные") +
theme_minimal()
# START -----------------------------------------------------------------------------------------------------------
Sys.setenv(LANG = "en_US.UTF-8")
#Library
library(pacman)
pacman::p_load(lubridate, purrr, dplyr, tidyr, forecast, zoo, rlang, ggplot2, tidyverse, raster,
sp, geodata, terra, rasterVis, BiocManager, dismo, XML, jsonlite, rgdal, rJava,
readxl, rgbif, factoextra, NbClust, cluster, openxlsx, caret, mice, missForest, knitr, htmltools,
FactoMineR, missMDA, pcaMethods, caret, ggfortify, gridExtra, hrbrthemes, corrplot, mice,
caTools, vegan, pvclust
)
#Empty Global Enviroment
rm(list = ls())
# Read all lists in file
file_path <- "E:/Eranthis/Eranthis_morph.xlsx"
all_sheets <- excel_sheets(file_path)
for (sheet_name in all_sheets) {
var_name <- make.names(sheet_name)
assign(var_name, read_excel(file_path, sheet = sheet_name))
}
all_dataframes <- list("E.sibirica", "E.tanhoensis", "E.sibirica_x_E.tanhoensis", "E.krasnoborovii", "E.sineli",
"E.stellata", "E.stellata.Korea.", "E.pinnatifida", "E.pungdoensis", "E.albiflora",
"E.lobulata", "E.byunsanensis")
#Making One table
tables <- lapply(all_dataframes, get)
tables <- lapply(tables, as.data.frame)
tables <- lapply(tables, function(tbl) mutate_all(tbl, as.character))
tables <- lapply(seq_along(all_dataframes), function(i) {
df <- get(all_dataframes[[i]])
df <- as.data.frame(mutate_all(df, as.character))
df <- df[complete.cases(df$Species), ]
df$Species <- all_dataframes[[i]]
return(df)
})
combined_data <- bind_rows(tables)
combined_data <- combined_data[, -c(1,3,34:44,48) ]
combined_data <- combined_data %>%
mutate_at(vars(2:34), ~as.numeric(.))
data_plot <- reshape2::melt(combined_data, id.vars = "Species")
ggplot(data_plot, aes(x = Species, y = value, fill = variable)) +
geom_boxplot(data = subset(data, variable %in% c("PHfl", "PHfr")),
position = position_dodge(width = 0.8), width = 0.5) +
scale_fill_manual(values = c("PHfl" = "slateblue1", "PHfr" = "tomato"), name = "Данные") +
theme_minimal()
View(data_plot)
data_plot <- reshape2::melt(combined_data, id.vars = "Species")
View(combined_data)
View(data_plot)
ggplot(data_plot, aes(x = Species, y = value, fill = variable)) +
geom_boxplot(data = subset(data, variable %in% c("PHfl", "PHfr")),
position = position_dodge(width = 0.8), width = 0.5) +
scale_fill_manual(values = c("PHfl" = "slateblue1", "PHfr" = "tomato"), name = "Данные") +
theme_minimal()
View(data_plot)
ggplot(data_plot, aes(x = Species, y = value, fill = variable)) +
geom_boxplot(data = subset(data, variable %in% c("PHfl", "PHfr")),
position = position_dodge(width = 0.8), width = 0.5) +
scale_fill_manual(values = c("PHfl" = "slateblue1", "PHfr" = "tomato"), name = "Данные") +
theme_minimal()
View(data_plot)
ggplot(data_plot, aes(x = Species, y = value, fill = variable)) +
geom_boxplot(data = subset(data_plot, variable %in% c("PHfl", "PHfr")),
position = position_dodge(width = 0.8), width = 0.5) +
scale_fill_manual(values = c("PHfl" = "slateblue1", "PHfr" = "tomato"), name = "Данные") +
theme_minimal()
View(data_plot)
target_species <- c('E.sibirica', 'E.tanhoensis', 'E.sibirica_x_E.tanhoensis')
data_plot_target <- data_plot[data_plot$Species %in% target_species, ]
ggplot(data_plot_target, aes(x = Species, y = value, fill = variable)) +
geom_boxplot(data = subset(data_plot_target, variable %in% c("PHfl", "PHfr")),
position = position_dodge(width = 0.8), width = 0.5) +
scale_fill_manual(values = c("PHfl" = "slateblue1", "PHfr" = "tomato"), name = "Данные") +
theme_minimal()
ggplot(data_plot_target, aes(x = Species, y = value, fill = variable)) +
geom_boxplot(data = subset(data_plot_target, variable %in% c("BLSLfl", "BLSLfr")),
position = position_dodge(width = 0.8), width = 0.5) +
scale_fill_manual(values = c("BLSLfl" = "slateblue1", "BLSLfr" = "tomato"), name = "Данные") +
theme_minimal()
ggplot(data_plot_target, aes(x = Species, y = value, fill = variable)) +
geom_boxplot(data = subset(data_plot_target, variable %in% c("BSLNfl", "BSLNfr")),
position = position_dodge(width = 0.8), width = 0.5) +
scale_fill_manual(values = c("BSLNfl" = "slateblue1", "BSLNfr" = "tomato"), name = "Данные") +
theme_minimal()
ggplot(data_plot_target, aes(x = Species, y = value, fill = variable)) +
geom_boxplot(data = subset(data_plot_target, variable %in% c("PHfl", "PHfr")),
position = position_dodge(width = 0.8), width = 0.5) +
scale_fill_manual(values = c("PHfl" = "slateblue1", "PHfr" = "tomato"), name = "Данные") +
theme_minimal()
Sys.setenv(LANG = "en_US.UTF-8")
#Library
library(pacman)
pacman::p_load(lubridate, purrr, dplyr, tidyr, forecast, zoo, rlang, ggplot2, tidyverse, raster,
sp, geodata, terra, rasterVis, BiocManager, dismo, XML, jsonlite, rgdal, rJava,
readxl, rgbif, factoextra, NbClust, cluster, openxlsx, caret, mice, missForest, knitr, htmltools,
FactoMineR, missMDA, pcaMethods, caret, ggfortify, gridExtra, hrbrthemes, corrplot, mice,
caTools, vegan, pvclust
)
#Empty Global Enviroment
rm(list = ls())
SP1 <- read_xlsx("E:/Eranthis/Species/Distribution.xlsx)
SP1 <- read_xlsx("E:/Eranthis/Species/Distribution.xlsx")
SP1 <- read_xlsx("E:/Eranthis/Species/Distribution.xlsx")
SP1 <- read_xls("E:/Eranthis/Species/Distribution.xls")
SP2 <- read_xlsx("E:/Eranthis/Species/Species_list.xlsx")
View(SP1)
SP1 <- read_xls("E:/Eranthis/Species/Distribution.xls")
View(SP1)
# Выделение строк из таблицы Distribution, которые соответствуют названиям из таблицы SP1
Distribution_SP1 <- filter(Distribution, Name %in% SP1$Name)
# Выделение строк из таблицы Distribution, которые соответствуют названиям из таблицы SP1
Distribution_SP1 <- filter(SP1, Name %in% SP2$Name)
View(SP2)
View(SP1)
SP1 <- read_xls("E:/Eranthis/Species/Distribution.xls")
# Выделение строк из таблицы Species_list, которые соответствуют названиям из таблицы SP1
Species_list_SP1 <- filter(SP2, Species %in% SP1$Species)
Species_list_SP1 <- filter(SP2, any(sapply(SP1$Species, function(pattern) any(str_detect(Species, pattern)))))
#Empty Global Enviroment
rm(list = ls())
SP1 <- read_xls("E:/Eranthis/Species/Distribution.xls")
SP2 <- read_xlsx("E:/Eranthis/Species/Species_list.xlsx")
View(SP1)
Species_list_SP1 <- filter(SP2, any(sapply(SP1$Species, function(pattern) any(str_detect(Species, pattern)))))
# Создание пустого списка для сохранения результатов
matching_species <- list()
# Цикл для сопоставления названий в таблице SP2 с названиями из таблицы SP1
for (pattern in SP1$Species) {
matching_species[[pattern]] <- filter(SP2, grepl(pattern, Species))
}
# Объединение всех результатов в одну таблицу
Species_list_SP1 <- do.call(rbind, matching_species)
View(Species_list_SP1)
Species_list_SP1 <- filter(SP2, Species %in% SP1$Species)
View(Species_list_SP1)
View(SP1)
replace_letters <- function(name, letters) {
if (startsWith(letters, name)) {
return(name)
} else {
return(letters)
}
}
View(SP1)
# Применение функции к каждой строке таблицы
SP3$Species <- mapply(replace_letters, SP1$First)
# Применение функции к каждой строке таблицы
SP1$First <- mapply(replace_letters, SP1$First)
replace_letters <- function(name, letters) {
if (startsWith(letters, name)) {
return(name)
} else {
return(letters)
}
}
# Применение функции к каждой строке таблицы
SP1$First <- mapply(replace_letters, SP1$First, SP1$Letters)
View(SP1)
#Empty Global Enviroment
rm(list = ls())
SP1 <- read_xls("E:/Eranthis/Species/SP2.xls")
SP2 <- read_xlsx("E:/Eranthis/Species/Species_list.xlsx")
SP1 <- read_xlsx("E:/Eranthis/Species/SP2.xlsx")
matching_rows <- inner_join(SP1, SP2, by = c("Column1" = "Column1", "Column2" = "Column2", "Column3" = "Column3"))
matching_rows <- inner_join(SP1, SP2, by = c("Family" = "Family", "Genus" = "Genus", "Species" = "Species"))
View(matching_rows)
matching_rows <- inner_join(SP1, SP2, by = c("Species" = "Species"))
View(matching_rows)
pacman::p_load(lubridate, purrr, dplyr, tidyr, forecast, zoo, rlang, ggplot2, tidyverse, raster,
sp, geodata, terra, rasterVis, BiocManager, dismo, XML, jsonlite, rgdal, rJava,
readxl, rgbif, factoextra, NbClust, cluster, openxlsx, caret, mice, missForest, knitr, htmltools,
FactoMineR, missMDA, pcaMethods, caret, ggfortify, gridExtra, hrbrthemes, corrplot, mice,
caTools, vegan, pvclust, openxlsx
)
write.xlsx(matching_rows, "matching_rows.xlsx", rowNames = FALSE)
pacman::p_load(dplyr, factoextra, fastICA, ggplot2, ggpubr, NMF,  party, psych, randomForest,
reshape2, Rtsne, shipunov, tidyverse, tseries, umap, vegan)
