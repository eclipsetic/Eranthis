pacman:p_load(readxl)
lobrary(pacman)
library(pacman)
pacman:p_load(readxl)
pacman::p_load(readxl)
# Specify the file path
file_path <- "E:/Eranthis/Eranthis_morph.xlsx"
# Read all sheets into a list
all_sheets <- excel_sheets(file_path)
# Create an empty list to store data frames
data_list <- list()
# Loop through each sheet and read data into the list
for (sheet_name in all_sheets) {
data <- read_excel(file_path, sheet = sheet_name)
data_list[[sheet_name]] <- data
}
View(data)
View(data_list)
# Specify the file path
file_path <- "E:/Eranthis/Eranthis_morph.xlsx"
all_sheets <- excel_sheets(file_path)
# Create individual data frames for each sheet
for (sheet_name in all_sheets) {
# Construct variable names for data frames
var_name <- make.names(sheet_name)  # Ensure valid variable names
# Read data and assign it to a variable with the sheet name
assign(var_name, read_excel(file_path, sheet = sheet_name))
}
View(E..albiflora)
# List all data frames in the environment
data_frames <- ls(pattern = "Sheet")
# Replace NA with 0 in each data frame
for (df_name in data_frames) {
assign(df_name, lapply(get(df_name), function(x) ifelse(is.na(x), 0, x)))
}
View(E..albiflora)
View(data)
View(data)
library(pacman)
pacman::p_load(readxl)
# Read all lists in file
file_path <- "E:/Eranthis/Eranthis_morph.xlsx"
all_sheets <- excel_sheets(file_path)
for (sheet_name in all_sheets) {
var_name <- make.names(sheet_name)
assign(var_name, read_excel(file_path, sheet = sheet_name))
}
View(E..albiflora)
View(E..tanhoensis)
View(E..albiflora)
View(E..krasnoborovii)
library(pacman)
pacman::p_load(readxl)
# Read all lists in file
file_path <- "E:/Eranthis/Eranthis_morph.xlsx"
all_sheets <- excel_sheets(file_path)
for (sheet_name in all_sheets) {
var_name <- make.names(sheet_name)
assign(var_name, read_excel(file_path, sheet = sheet_name))
}
pacman::p_load(readxl, rgif)
# START -----------------------------------------------------------------------------------------------------------
Sys.setenv(LANG = "en_US.UTF-8")
#Library
library(pacman)
pacman::p_load(
lubridate,
purrr,
dplyr,
tidyr,
forecast,
zoo,
rlang,
ggplot2,
tidyverse,
raster,
sp,
geodata,
terra,
rasterVis,
BiocManager,
devtools,
dismo,
XML,
jsonlite,
rgdal,
rJava,
readxl
)
dir.create("E:/Eranthis/maps")
bioclim <- getData(name="worldclim", download=TRUE, path = "E:/Eranthis/maps", res= 2.5, var="bio")
pacman::p_load(
lubridate,
purrr,
dplyr,
tidyr,
forecast,
zoo,
rlang,
ggplot2,
tidyverse,
raster,
sp,
geodata,
terra,
rasterVis,
BiocManager,
devtools,
dismo,
XML,
jsonlite,
rgdal,
rJava,
readxl,
rgbif
)
#Spatial Point from GBIF
dir.create("E:/Eranthis/gbif")
species_list <- read.csv("PLANT_LIST.csv")$species
species_list <- read.csv("PLANT_LIST.csv")$species
species_list <- read_xls("PLANT_LIST.xlsx")$species
species_list <- read_xls("PLANT_LIST.xls")$species
species_list <- read_xlsx("PLANT_LIST.xlsx")$species
list()
file_list <- list.files("E:/Eranthis/gbif")
species_list <- read_xlsx("PLANT_LIST.xlsx")$species
species_list <- read_xlsx("E:/Eranthis/gbif/PLANT_LIST.xlsx")$species
# Create an empty list to store occurrence data
occ_data_list <- list()
# Loop through each species and retrieve occurrence data
for (species_name in species_list) {
print(paste("Retrieving data for:", species_name))
# Retrieve occurrence data for the current species
current_occ_data <- gbif(genus = "Tulipa", species = species_name, ext = NULL, args = NULL,
geo = TRUE, sp = TRUE, removeZeros = FALSE, download = TRUE)
# Store the occurrence data in the list
occ_data_list[[species_name]] <- current_occ_data
}
# Loop through each species and retrieve occurrence data
for (species_name in species_list) {
print(paste("Retrieving data for:", species_name))
# Retrieve occurrence data for the current species
current_occ_data <- gbif(genus = "Eranthis", species = species_name, ext = NULL, args = NULL,
geo = TRUE, sp = TRUE, removeZeros = FALSE, download = TRUE)
# Store the occurrence data in the list
occ_data_list[[species_name]] <- current_occ_data
}
# Установка необходимых пакетов, если они еще не установлены
if (!requireNamespace("leaflet", quietly = TRUE)) {
install.packages("leaflet")
}
if (!requireNamespace("rgbif", quietly = TRUE)) {
install.packages("rgbif")
}
# Загрузка библиотек
library(leaflet)
library(rgbif)
# Путь к папке, где будут сохранены карты
output_folder <- "E:/Eranthis/gbif/maps"
dir.create(output_folder, showWarnings = FALSE)
# Функция для получения данных GBIF для указанного вида
get_gbif_data <- function(genus, species) {
gbif_data <- gbif(genus = genus, species = species, geo = TRUE)
return(gbif_data)
}
# Цикл по каждому виду и создание карты
for (species_name in species_list) {
print(paste("Retrieving data for:", species_name))
# Получение данных GBIF
gbif_data <- get_gbif_data(genus = "Eranthis", species = species_name)
# Создание карты с точками
map <- leaflet(data = gbif_data) %>%
addTiles() %>%
addMarkers(
lng = ~decimalLongitude,
lat = ~decimalLatitude,
popup = ~paste("Genus: Eranthis", "<br>Species: ", species_name)
)
# Сохранение карты в файл
map_file_path <- file.path(output_folder, paste0("map_", gsub(" ", "_", species_name), ".html"))
saveWidget(map, map_file_path, selfcontained = TRUE)
print(paste("Map saved for:", species_name))
}
# Путь к папке, где будут сохранены карты
output_folder <- "E:/Eranthis/gbif/maps"
dir.create(output_folder, showWarnings = FALSE)
# Функция для получения данных GBIF для указанного вида
get_gbif_data <- function(genus, species) {
gbif_data <- gbif(genus = genus, species = species, geo = TRUE)
return(gbif_data)
}
# Цикл по каждому виду и создание карты
for (species_name in species_list) {
print(paste("Retrieving data for:", species_name))
# Получение данных GBIF
gbif_data <- get_gbif_data(genus = "Eranthis", species = species_name)
# Проверка наличия столбцов latitude и longitude
if ("latitude" %in% colnames(gbif_data) && "longitude" %in% colnames(gbif_data)) {
# Создание карты с точками
map <- leaflet(data = gbif_data) %>%
addTiles() %>%
addMarkers(
lng = ~longitude,
lat = ~latitude,
popup = ~paste("Genus: Eranthis", "<br>Species: ", species_name)
)
# Сохранение карты в файл
map_file_path <- file.path(output_folder, paste0("map_", gsub(" ", "_", species_name), ".html"))
saveWidget(map, map_file_path, selfcontained = TRUE)
print(paste("Map saved for:", species_name))
} else {
print(paste("Error: latitude or longitude column not found for species", species_name))
}
}
