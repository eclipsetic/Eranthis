assign(var_name, read_excel(file_path, sheet = sheet_name))
}
all_dataframes <- list("E.sibirica", "E.tanhoensis", "E.sibirica_x_E.tanhoensis", "E.krasnoborovii", "E.sineli",
"E.stellata", "E.stellata.Korea.", "E.pinnatifida", "E.pungdoensis", "E.albiflora",
"E.lobulata", "E.byunsanensis")
#Making One table
tables <- lapply(all_dataframes, get)
tables <- lapply(tables, as.data.frame)
tables <- lapply(tables, function(tbl) mutate_all(tbl, as.character))
tables <- lapply(seq_along(all_dataframes), function(i) {
df <- get(all_dataframes[[i]])
df <- as.data.frame(mutate_all(df, as.character))
df <- df[complete.cases(df$Species), ]
df$Species <- all_dataframes[[i]]
return(df)
})
combined_data <- bind_rows(tables)
combined_data <- combined_data[, -c(1,3,45,46,47,48) ]
combined_data <- combined_data %>%
mutate_at(vars(2:42), ~as.numeric(.))
set.seed(123)
split = sample.split(combined_data$PHfl, SplitRatio = 0.5)
training_set <- subset(combined_data, split == TRUE)
test_set <- subset(combined_data, split == FALSE)
sapply( lapply(training_set, unique), length)
training_set <- training_set[, colSums(is.na(training_set)) != nrow(training_set)]
test_set <- test_set[, colSums(is.na(test_set)) != nrow(test_set)]
regressor = lm(formula = PHfl ~ ., data = training_set, na.action = na.exclude)
# Multiple Linear Regression Modelling ----------------------------------------------------------------------------
combined_data <- combined_data %>%
mutate_at(vars(2:42), ~as.factor(.))
set.seed(123)
split = sample.split(combined_data$PHfl, SplitRatio = 0.5)
training_set <- subset(combined_data, split == TRUE)
test_set <- subset(combined_data, split == FALSE)
sapply( lapply(training_set, unique), length)
training_set <- training_set[, colSums(is.na(training_set)) != nrow(training_set)]
test_set <- test_set[, colSums(is.na(test_set)) != nrow(test_set)]
regressor = lm(formula = PHfl ~ ., data = training_set, na.action = na.exclude)
# Multiple Linear Regression Modelling ----------------------------------------------------------------------------
combined_data <- combined_data %>%
mutate_at(vars(2:42), ~as.numeric(.))
set.seed(123)
split = sample.split(combined_data$PHfl, SplitRatio = 0.5)
training_set <- subset(combined_data, split == TRUE)
test_set <- subset(combined_data, split == FALSE)
sapply( lapply(training_set, unique), length)
training_set <- training_set[, colSums(is.na(training_set)) != nrow(training_set)]
test_set <- test_set[, colSums(is.na(test_set)) != nrow(test_set)]
regressor = lm(formula = PHfl ~ ., data = training_set, na.action = na.exclude)
View(training_set)
combined_data$Species <- factor(combined_data$Species)
View(combined_data)
set.seed(123)
split = sample.split(combined_data$PHfl, SplitRatio = 0.5)
training_set <- subset(combined_data, split == TRUE)
test_set <- subset(combined_data, split == FALSE)
sapply( lapply(training_set, unique), length)
training_set <- training_set[, colSums(is.na(training_set)) != nrow(training_set)]
regressor = lm(formula = PHfl ~ ., data = training_set, na.action = na.exclude)
# Multiple Linear Regression Modelling ----------------------------------------------------------------------------
combined_data <- combined_data %>%
mutate_at(vars(2:42), ~as.factor(.))
combined_data$Species <- factor(combined_data$Species)
set.seed(123)
split = sample.split(combined_data$PHfl, SplitRatio = 0.5)
training_set <- subset(combined_data, split == TRUE)
test_set <- subset(combined_data, split == FALSE)
sapply( lapply(training_set, unique), length)
training_set <- training_set[, colSums(is.na(training_set)) != nrow(training_set)]
regressor = lm(formula = PHfl ~ ., data = training_set, na.action = na.exclude)
regressor = lm(formula = PHfl ~ ., data = training_set, na.action = na.action)
regressor = lm(formula = PHfl ~ ., data = training_set, na.action = na.exclude())
regressor = lm(formula = PHfl ~ ., data = training_set, na.action = na.exclude)
regressor = lm(formula = PHfl ~ ., data = training_set, na.action = na.omit)
# Multiple Linear Regression Modelling ----------------------------------------------------------------------------
combined_data <- combined_data %>%
+   mutate_at(vars(2:42), ~as.numeric(.))
# Multiple Linear Regression Modelling ----------------------------------------------------------------------------
combined_data <- combined_data %>%
mutate_at(vars(2:42), ~as.numeric(.))
# Multiple Linear Regression Modelling ----------------------------------------------------------------------------
combined_data <- combined_data %>%
mutate_at(vars(1:42), ~as.numeric(.))
set.seed(123)
split = sample.split(combined_data$PHfl, SplitRatio = 0.5)
training_set <- subset(combined_data, split == TRUE)
test_set <- subset(combined_data, split == FALSE)
sapply( lapply(training_set, unique), length)
training_set <- training_set[, colSums(is.na(training_set)) != nrow(training_set)]
regressor = lm(formula = PHfl ~ ., data = training_set, na.action = na.omit)
regressor = lm(formula = PHfl ~ ., data = training_set, na.action = na.exclude)
View(test_set)
View(training_set)
View(combined_data)
View(E.albiflora)
View(E.byunsanensis)
View(E.krasnoborovii)
View(E.lobulata)
View(E.pinnatifida)
View(E.pungdoensis)
View(E.sibirica)
View(E.sibirica_x_E.tanhoensis)
View(E.sineli)
View(E.stellata)
View(combined_data)
all_dataframes <- list("E.sibirica", "E.tanhoensis", "E.sibirica_x_E.tanhoensis", "E.krasnoborovii", "E.sineli",
"E.stellata", "E.stellata.Korea.", "E.pinnatifida", "E.pungdoensis", "E.albiflora",
"E.lobulata", "E.byunsanensis")
#Making One table
tables <- lapply(all_dataframes, get)
tables <- lapply(tables, as.data.frame)
tables <- lapply(tables, function(tbl) mutate_all(tbl, as.character))
View(combined_data)
combined_data <- bind_rows(tables)
combined_data <- combined_data[, -c(1,3,45,46,47,48) ]
View(combined_data)
View(combined_data)
combined_data <- combined_data %>%
mutate_at(vars(2:42), ~as.numeric(.))
split = sample.split(combined_data$PHfl, SplitRatio = 0.5)
View(training_set)
training_set <- subset(combined_data, split == TRUE)
test_set <- subset(combined_data, split == FALSE)
View(training_set)
sapply( lapply(training_set, unique), length)
training_set <- training_set[, colSums(is.na(training_set)) != nrow(training_set)]
regressor = lm(formula = PHfl ~ ., data = training_set, na.action = na.exclude)
View(training_set)
sapply( lapply(training_set, unique), length)
View(training_set)
nlevels(training_set)
nlevels(training_set$Species)
nlevels(training_set$PHfl)
nlevels(training_set$BLSLfl)
nlevels(training_set$BLSWfl)
regressor = lm(formula = PHfl ~ ., data = training_set, na.action = "na.exclude")
# Multiple Linear Regression Modelling ----------------------------------------------------------------------------
combined_data <- combined_data %>%
mutate_at(vars(2:42), ~as.factor(.))
set.seed(123)
split = sample.split(combined_data$PHfl, SplitRatio = 0.5)
training_set <- subset(combined_data, split == TRUE)
test_set <- subset(combined_data, split == FALSE)
sapply( lapply(training_set, unique), length)
training_set <- training_set[, colSums(is.na(training_set)) != nrow(training_set)]
regressor = lm(formula = PHfl ~ ., data = training_set, na.action = "na.exclude")
View(test_set)
# Multiple Linear Regression Modelling ----------------------------------------------------------------------------
combined_data <- combined_data %>%
mutate_at(vars(2:42), ~as.numeric(.))
View(combined_data)
combined_data <- bind_rows(tables)
combined_data <- combined_data[, -c(1,3,45,46,47,48) ]
combined_data <- combined_data %>%
mutate_at(vars(2:42), ~as.numeric(.))
set.seed(123)
split = sample.split(combined_data$PHfl, SplitRatio = 0.5)
training_set <- subset(combined_data, split == TRUE)
test_set <- subset(combined_data, split == FALSE)
sapply( lapply(training_set, unique), length)
training_set <- training_set[, colSums(is.na(training_set)) != nrow(training_set)]
regressor = lm(formula = PHfl ~ ., data = training_set, na.action = "na.exclude")
y_pred = predict(regressor, newdata = test_set)
regressor = lm(formula = PHfl ~ ., data = training_set, na.action = "na.omit")
values_count <- sapply(lapply(training_set, unique), length)
regressor = lm(formula = PHfl ~ ., data = training_set[ , values_count > 1], na.action = "na.omit")
training_set <- na.omit(training_set)
# START -----------------------------------------------------------------------------------------------------------
Sys.setenv(LANG = "en_US.UTF-8")
#Library
library(pacman)
pacman::p_load(vegan, pvclust, factoextra)
setwd("E:/Eranthis")
data<-read.table("data.txt",header=T,sep="\t")
data<-read.table("data.txt",header=T,sep="\t", fileEncoding = "UTF-8")
# START -----------------------------------------------------------------------------------------------------------
Sys.setenv(LANG = "en_US.UTF-8")
#Library
library(pacman)
pacman::p_load(vegan, pvclust, factoextra)
setwd("E:/Eranthis")
data<-read.table("data.txt",header=T,sep="\t", fileEncoding = "UTF-8")
data<-file("data.txt",header=T,sep="\t", fileEncoding = "UTF-8")
readLines(file_info)
pacman::p_load(vegan, pvclust, factoextra,xslx)
pacman::p_load(vegan, pvclust, factoextra, readxl)
#////////////////////////////////////////////////////случаное реплецирование
data <- read_xlsx("Tulips.xlsx")
setwd("E:/Eranthis")
#////////////////////////////////////////////////////случаное реплецирование
data <- read_xlsx("Tulips.xlsx")
#////////////////////////////////////////////////////случаное реплецирование
data <- read_xlsx("E:/Eranthis/Tulips.xlsx")
#////////////////////////////////////////////////////случаное реплецирование
data <- read_xlsx(path = "E:/Eranthis/Tulips.xlsx")
#////////////////////////////////////////////////////случаное реплецирование
data <- read_excel("Tulips.xlsx")
#////////////////////////////////////////////////////случаное реплецирование
data <- read_excel("E:/Eranthis/Tulips.xlsx")
#////////////////////////////////////////////////////случаное реплецирование
data <- read_excel("E:/Eranthis/Tulips.xls")
View(data)
data<-data[,-1]
data[is.na(data)]<--9
View(data)
#////////////////////////////////////////////////////случаное реплецирование
data <- read_excel("E:/Eranthis/Tulips.xls")
View(data)
data<-data[,-1]
data[is.na(data)]<--9
data_v<-data[,c(2:ncol(data))]
View(data_v)
sl<-list(data_v[data_v[,1]!=-9,1])
View(sl)
for(i in 1:ncol(data_v)) sl<-c(sl,list(data_v[data_v[,i]!=-9,i]))
for(i in 1:ncol(data_v))
{
data_v[data_v[,i]==-9,i]<-sample(sl[[i]], length(data_v[data_v[,i]==-9,i]), replace=T)
}
data_rep<-cbind(pop=data[,1], data_v)
for(i in 1:ncol(data_v)){
data_v[data_v[,i]==-9,i]<-sample(sl[[i]], length(data_v[data_v[,i]==-9,i]), replace=T)
}
data_rep<-cbind(pop=data[,1], data_v)
data<-data_rep
row_n<-data.frame(point=data[,1])
data<-data[,-1]
for(i in 1:ncol(data)) data[,i]<-(data[,i]-mean(data[,i]))/sd(data[,i])
fit<-prcomp(data)
fviz_pca_biplot(fit, habillage=row_n[,1], addEllipses=T, pointsize = 6)
View(row_n)
#////////////////////////////////////////////////////множественная линейная регрессия
mising_value <- function(data_p, nx){
pr_names<-c("y")
for(i in 2:ncol(data_p)) pr_names<-c(pr_names, paste("x", i-1, sep=""))
colnames(data_p)<-pr_names
f<-paste(pr_names[1], "~", sep="")
for(i in 2:length(pr_names)) f<-paste(f, "+", pr_names[i], sep="")
f<-as.formula(f)
fit <- lm(f, data=data_p)
newdata=data.frame(x=nx[1])
for(i in 2:length(nx)) newdata<-cbind(newdata, c(nx[i]))
colnames(newdata)<-pr_names[2:length(pr_names)]
predict(fit, newdata)[[1]]
}
data <- read_excel("E:/Eranthis/Tulips.xls")
pop<-data[,2]
data<-data[,-c(1:2)]
data_rep<-data
for(i in 1:ncol(data))
for(j in 1:nrow(data))
for(i in 1:ncol(data)){
for(j in 1:nrow(data)){
if(is.na(data[j,i])){
yd<-data[,i]
nx<-as.numeric(data[j,])
nx<-nx[!is.na(nx)]
data_p<-data[,!is.na(data[j,])]
data_p<-cbind(y=yd,data_p)
data_p<-data_p[rowSums(is.na(data_p))==0,]
data_rep[j,i]<-mising_value(data_p, nx)
}
}
}
data_rep<-cbind(pop=pop, data_rep)
data<-data_rep
row_n<-data.frame(point=data[,1])
data<-data[,-1]
data_am<-data.frame(dep=data[,12], point=row_n)
fit <- aov(dep ~ point, data=data_am)
summary(fit)
a<-3.019
1-1/a
boxplot(dep ~ point, data=data_am)
for(i in 1:ncol(data)) data[,i]<-(data[,i]-mean(data[,i]))/sd(data[,i])
fit<-prcomp(data)
fviz_pca_biplot(fit, habillage=row_n[,1], addEllipses=T, pointsize = 6)
for(i in 1:ncol(data)){
for(j in 1:nrow(data)){
if(is.na(data[j,i])){
yd<-data[,i]
nx<-as.numeric(data[j,])
nx<-nx[!is.na(nx)]
data_p<-data[,!is.na(data[j,])]
data_p<-cbind(y=yd,data_p)
data_p<-data_p[rowSums(is.na(data_p))==0,]
data_rep[j,i]<-mising_value(data_p, nx)
}
}
}
#////////////////////////////////////////////////////множественная линейная регрессия
mising_value <- function(data_p, nx){
pr_names<-c("y")
for(i in 2:ncol(data_p)) pr_names<-c(pr_names, paste("x", i-1, sep=""))
colnames(data_p)<-pr_names
f<-paste(pr_names[1], "~", sep="")
for(i in 2:length(pr_names)) f<-paste(f, "+", pr_names[i], sep="")
f<-as.formula(f)
fit <- lm(f, data=data_p)
newdata=data.frame(x=nx[1])
for(i in 2:length(nx)) newdata<-cbind(newdata, c(nx[i]))
colnames(newdata)<-pr_names[2:length(pr_names)]
predict(fit, newdata)[[1]]
}
data <- read_excel("E:/Eranthis/Tulips.xls")
pop<-data[,2]
data<-data[,-c(1:2)]
data_rep<-data
View(data)
View(data_rep)
View(pop)
for(i in 1:ncol(data)){
for(j in 1:nrow(data)){
if(is.na(data[j,i])){
yd<-data[,i]
nx<-as.numeric(data[j,])
nx<-nx[!is.na(nx)]
data_p<-data[,!is.na(data[j,])]
data_p<-cbind(y=yd,data_p)
data_p<-data_p[rowSums(is.na(data_p))==0,]
data_rep[j,i]<-mising_value(data_p, nx)
}
}
}
yd<-data[,i]
nx<-as.numeric(data[j,])
nx<-nx[!is.na(nx)]
data_p<-data[,!is.na(data[j,])]
data_p<-cbind(y=yd,data_p)
nx<-as.numeric(data[j, , drop = FALSE])
data_p<-data[,!is.na(data[j, , drop = FALSE])]
for (i in 1:ncol(data)) {
for (j in 1:nrow(data)) {
if (is.na(data[j, i])) {
yd <- data[, i]
nx <- as.numeric(data[j, ])
nx <- nx[!is.na(nx)]
na_index <- which(!is.na(data[j, , drop = FALSE]))
data_p <- data[, na_index]
data_p <- cbind(y = yd, data_p)
data_p <- data_p[rowSums(is.na(data_p)) == 0, ]
data_rep[j, i] <- missing_value(data_p, nx)
}
}
}
#////////////////////////////////////////////////////множественная линейная регрессия
mising_value <- function(data_p, nx){
pr_names<-c("y")
for(i in 2:ncol(data_p)) pr_names<-c(pr_names, paste("x", i-1, sep=""))
colnames(data_p)<-pr_names
f<-paste(pr_names[1], "~", sep="")
for(i in 2:length(pr_names)) f<-paste(f, "+", pr_names[i], sep="")
f<-as.formula(f)
fit <- lm(f, data=data_p)
newdata=data.frame(x=nx[1])
for(i in 2:length(nx)) newdata<-cbind(newdata, c(nx[i]))
colnames(newdata)<-pr_names[2:length(pr_names)]
predict(fit, newdata)[[1]]
}
data <- read_excel("E:/Eranthis/Tulips.xls")
pop<-data[,2]
data<-data[,-c(1:2)]
data_rep<-data
for (i in 1:ncol(data)) {
for (j in 1:nrow(data)) {
if (is.na(data[j, i])) {
yd <- data[, i]
nx <- as.numeric(data[j, ])
nx <- nx[!is.na(nx)]
na_index <- which(!is.na(data[j, , drop = FALSE]))
data_p <- data[, na_index]
data_p <- cbind(y = yd, data_p)
data_p <- data_p[rowSums(is.na(data_p)) == 0, ]
data_rep[j, i] <- missing_value(data_p, nx)
}
}
}
for (i in 1:ncol(data)) {
for (j in 1:nrow(data)) {
if (is.na(data[j, i])) {
yd <- data[, i]
nx <- as.numeric(data[j, ])
nx <- nx[!is.na(nx)]
na_index <- which(!is.na(data[j, , drop = FALSE]))
data_p <- data[, na_index]
data_p <- cbind(y = yd, data_p)
data_p <- data_p[rowSums(is.na(data_p)) == 0, ]
data_rep[j,i]<-missing_value(data_p, nx)
}
}
}
View(data_p)
data_rep[j,i]<-missing_value(data_p, nx)
data_rep[j,i]<-mising_value(data_p, nx)
for (i in 1:ncol(data)) {
for (j in 1:nrow(data)) {
if (is.na(data[j, i])) {
yd <- data[, i]
nx <- as.numeric(data[j, ])
nx <- nx[!is.na(nx)]
na_index <- which(!is.na(data[j, , drop = FALSE]))
data_p <- data[, na_index]
data_p <- cbind(y = yd, data_p)
data_p <- data_p[rowSums(is.na(data_p)) == 0, ]
data_rep[j,i]<-mising_value(data_p, nx)
}
}
}
#////////////////////////////////////////////////////множественная линейная регрессия
mising_value <- function(data_p, nx){
pr_names<-c("y")
for(i in 2:ncol(data_p)) pr_names<-c(pr_names, paste("x", i-1, sep=""))
colnames(data_p)<-pr_names
f<-paste(pr_names[1], "~", sep="")
for(i in 2:length(pr_names)) f<-paste(f, "+", pr_names[i], sep="")
f<-as.formula(f)
fit <- lm(f, data=data_p)
newdata=data.frame(x=nx[1])
for(i in 2:length(nx)) newdata<-cbind(newdata, c(nx[i]))
colnames(newdata)<-pr_names[2:length(pr_names)]
predict(fit, newdata)[[1]]
}
data <- read_excel("E:/Eranthis/Tulips.xls")
pop<-data[,2]
data<-data[,-c(1:2)]
data_rep<-data
for (i in 1:ncol(data)) {
for (j in 1:nrow(data)) {
if (is.na(data[j, i])) {
yd <- data[, i]
nx <- as.numeric(data[j, ])
nx <- nx[!is.na(nx)]
na_index <- which(!is.na(data[j, , drop = FALSE]))
data_p <- data[, na_index]
data_p <- cbind(y = yd, data_p)
data_p <- data_p[rowSums(is.na(data_p)) == 0, ]
data_rep[j,i]<-mising_value(data_p, nx)
}
}
}
data_rep<-cbind(pop=pop, data_rep)
data<-data_rep
row_n<-data.frame(point=data[,1])
data<-data[,-1]
data_am<-data.frame(dep=data[,12], point=row_n)
fit <- aov(dep ~ point, data=data_am)
View(data)
#////////////////////////////////////////////////////множественная линейная регрессия
mising_value <- function(data_p, nx){
pr_names<-c("y")
for(i in 2:ncol(data_p)) pr_names<-c(pr_names, paste("x", i-1, sep=""))
colnames(data_p)<-pr_names
f<-paste(pr_names[1], "~", sep="")
for(i in 2:length(pr_names)) f<-paste(f, "+", pr_names[i], sep="")
f<-as.formula(f)
fit <- lm(f, data=data_p)
newdata=data.frame(x=nx[1])
for(i in 2:length(nx)) newdata<-cbind(newdata, c(nx[i]))
colnames(newdata)<-pr_names[2:length(pr_names)]
predict(fit, newdata)[[1]]
}
data <- read_excel("E:/Eranthis/Tulips.xls")
pop<-data[,2]
data<-data[,-c(1:2)]
data_rep<-data
for (i in 1:ncol(data)) {
for (j in 1:nrow(data)) {
if (is.na(data[j, i])) {
yd <- data[, i]
nx <- as.numeric(data[j, ])
nx <- nx[!is.na(nx)]
na_index <- which(!is.na(data[j, , drop = FALSE]))
data_p <- data[, na_index]
data_p <- cbind(y = yd, data_p)
data_p <- data_p[rowSums(is.na(data_p)) == 0, ]
data_rep[j,i]<-mising_value(data_p, nx)
}
}
}
data_rep<-cbind(pop=pop, data_rep)
data<-data_rep
row_n<-data.frame(point=data[,1])
View(data)
data_T <- read_excel("E:/Eranthis/Tulips.xls")
View(data_T)
View(data)
data_am<-data.frame(dep=data[,12], point=row_n)
fit <- aov(dep ~ point, data=data_am)
summary(fit)
a<-3.019
1-1/a
boxplot(dep ~ point, data=data_am)
for(i in 1:ncol(data)) data[,i]<-(data[,i]-mean(data[,i]))/sd(data[,i])
fit<-prcomp(data)
for(i in 1:ncol(data)){
data[,i]<-(data[,i]-mean(data[,i]))/sd(data[,i])
}
for (i in 1:ncol(data)) {
if (is.numeric(data[, i])) {
data[, i] <- (data[, i] - mean(data[, i], na.rm = TRUE)) / sd(data[, i], na.rm = TRUE)
} else {
warning(paste("Column", i, "is not numeric. Skipping..."))
}
}
for(i in 2:ncol(data)){
data[,i]<-(data[,i]-mean(data[,i]))/sd(data[,i])
}
fit<-prcomp(data)
fit<-prcomp(data[,2:12])
fviz_pca_biplot(fit, habillage=row_n[,1], addEllipses=T, pointsize = 6)
View(data)
