pacman::p_load(readxl, ggplot2, scales, extrafont, stringr)
setwd("E:/Eranthis")
fenolic <- read_excel("fenolic.xlsx")
fenolic$leaves <- as.numeric(as.character(fenolic$leaves))
fenolic$flowers <- as.numeric(as.character(fenolic$flowers))
fenolic_long <- tidyr::gather(fenolic, key = "variable", value = "value", -name)
# Создание графика с разделением по оси x
ggplot(fenolic_long, aes(x = name, y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Leaves and Flowers Comparison", x = "Name", y = "Count") +
scale_fill_manual(values = c("leaves" = "green", "flowers" = "red")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
facet_grid(. ~ variable, scales = "free_x", space = "free_x") +
scale_y_continuous(labels = comma)
font <- "Palatino Linotype"
fenolic_long$variable_label <- str_to_title(fenolic_long$variable)
ggplot(fenolic_long, aes(x = factor(name, levels = unique(name)), y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Сompound", y = "Peak area, ion count",
fill = "Variable:") +
scale_fill_manual(values = c("Leaves" = "green", "Flowers" = "red")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, family = font, face = "bold"),
text = element_text(family = font),
axis.title = element_text(family = font, face = "bold"),
plot.title = element_text(family = font, face = "bold"),
legend.text = element_text(family = font),
legend.title = element_text(family = font, face = "bold"),
legend.position = "right") +
scale_y_continuous(labels = comma, breaks = seq(0, max(fenolic_long$value), by = 50000000))
ggplot(fenolic_long, aes(x = factor(name, levels = unique(name)), y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Peak area, ion count", y = "Сompound") +
scale_fill_manual(values = c("leaves" = "green", "flowers" = "red")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(labels = comma, breaks = seq(0, max(fenolic_long$value), by = 50000000))
m
ggplot(fenolic_long, aes(x = factor(name, levels = unique(name)), y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Сompound", y = "Peak area, ion count",
fill = "Variable:") +
scale_fill_manual(values = c("leaves" = "green", "flowers" = "red")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, family = font, face = "bold"),
text = element_text(family = font),
axis.title = element_text(family = font, face = "bold"),
plot.title = element_text(family = font, face = "bold"),
legend.text = element_text(family = font),
legend.title = element_text(family = font, face = "bold"),
legend.position = "right") +
scale_y_continuous(labels = comma, breaks = seq(0, max(fenolic_long$value), by = 50000000))
ggplot(fenolic_long, aes(x = factor(name, levels = unique(name)), y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge", size = 1.5) +
labs(x = "Сompound", y = "Peak area, ion count",
fill = "Variable:") +
scale_fill_manual(values = c("leaves" = "green", "flowers" = "red")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, family = font, face = "bold"),
text = element_text(family = font),
axis.title = element_text(family = font, face = "bold"),
plot.title = element_text(family = font, face = "bold"),
legend.text = element_text(family = font),
legend.title = element_text(family = font, face = "bold"),
legend.position = "right") +
scale_y_continuous(labels = comma, breaks = seq(0, max(fenolic_long$value), by = 50000000))
ggplot(fenolic_long, aes(x = factor(name, levels = unique(name)), y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge", size = 1.5) +
labs(x = "Сompound", y = "Peak area, ion count",
fill = "Variable:") +
scale_fill_manual(values = c("leaves" = "green", "flowers" = "red")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, family = font, face = "bold"),
text = element_text(family = font),
axis.title = element_text(family = font, face = "bold"),
plot.title = element_text(family = font, face = "bold"),
legend.text = element_text(family = font),
legend.title = element_text(family = font, face = "bold"),
legend.position = "right",
axis.ticks = element_line(size = 1.5),  # Толщина линий делений на осях
axis.ticks.length = unit(0.2, "cm")) +  # Длина линий делений
scale_y_continuous(labels = comma, breaks = seq(0, max(fenolic_long$value), by = 50000000))
ggplot(fenolic_long, aes(x = factor(name, levels = unique(name)), y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge", size = 1.5) +
labs(x = "Сompound", y = "Peak area, ion count",
fill = "Variable:") +
scale_fill_manual(values = c("leaves" = "green", "flowers" = "red")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, family = font, face = "bold"),
text = element_text(family = font),
axis.title = element_text(family = font, face = "bold"),
plot.title = element_text(family = font, face = "bold"),
legend.text = element_text(family = font),
legend.title = element_text(family = font, face = "bold"),
legend.position = "right",
axis.ticks = element_line(size = 1.5),  # Толщина линий делений на осях
axis.ticks.length = unit(12, "cm")) +  # Длина линий делений
scale_y_continuous(labels = comma, breaks = seq(0, max(fenolic_long$value), by = 50000000))
ggplot(fenolic_long, aes(x = factor(name, levels = unique(name)), y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge", size = 1.5) +
labs(x = "Сompound", y = "Peak area, ion count",
fill = "Variable:") +
scale_fill_manual(values = c("leaves" = "green", "flowers" = "red")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, family = font, face = "bold"),
text = element_text(family = font),
axis.title = element_text(family = font, face = "bold"),
plot.title = element_text(family = font, face = "bold"),
legend.text = element_text(family = font),
legend.title = element_text(family = font, face = "bold"),
legend.position = "right",
axis.ticks = element_line(size = 1.5),  # Толщина линий делений на осях
axis.ticks.length = unit(0,5, "cm")) +  # Длина линий делений
scale_y_continuous(labels = comma, breaks = seq(0, max(fenolic_long$value), by = 50000000))
ggplot(fenolic_long, aes(x = factor(name, levels = unique(name)), y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge", size = 1.5) +
labs(x = "Сompound", y = "Peak area, ion count",
fill = "Variable:") +
scale_fill_manual(values = c("leaves" = "green", "flowers" = "red")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, family = font, face = "bold"),
text = element_text(family = font),
axis.title = element_text(family = font, face = "bold"),
plot.title = element_text(family = font, face = "bold"),
legend.text = element_text(family = font),
legend.title = element_text(family = font, face = "bold"),
legend.position = "right",
axis.ticks = element_line(size = 1.5),  # Толщина линий делений на осях
axis.ticks.length = unit(0,5, "cm")) +  # Длина линий делений
scale_y_continuous(labels = comma, breaks = seq(0, max(fenolic_long$value), by = 50000000))
axis.ticks = element_line(size = 1.5) +  # Длина линий делений
ggplot(fenolic_long, aes(x = factor(name, levels = unique(name)), y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge", size = 1.5) +
labs(x = "Сompound", y = "Peak area, ion count",
fill = "Variable:") +
scale_fill_manual(values = c("leaves" = "green", "flowers" = "red")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, family = font, face = "bold"),
text = element_text(family = font),
axis.title = element_text(family = font, face = "bold"),
plot.title = element_text(family = font, face = "bold"),
legend.text = element_text(family = font),
legend.title = element_text(family = font, face = "bold"),
legend.position = "right",
axis.ticks = element_line(size = 1.5),  # Толщина линий делений на осях
) +
scale_y_continuous(labels = comma, breaks = seq(0, max(fenolic_long$value), by = 50000000))
ggplot(fenolic_long, aes(x = factor(name, levels = unique(name)), y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge", size = 1.5) +
labs(x = "Сompound", y = "Peak area, ion count",
fill = "Variable:") +
scale_fill_manual(values = c("leaves" = "green", "flowers" = "red")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, family = font, face = "bold"),
text = element_text(family = font),
axis.title = element_text(family = font, face = "bold"),
plot.title = element_text(family = font, face = "bold"),
legend.text = element_text(family = font),
legend.title = element_text(family = font, face = "bold"),
legend.position = "right") +
theme(axis.ticks = element_line(size = 1.5)) +
scale_y_continuous(labels = comma, breaks = seq(0, max(fenolic_long$value), by = 50000000))
ggplot(fenolic_long, aes(x = factor(name, levels = unique(name)), y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge", size = 1.5) +
labs(x = "Сompound", y = "Peak area, ion count",
fill = "Variable:") +
scale_fill_manual(values = c("leaves" = "green", "flowers" = "red")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, family = font, face = "bold"),
text = element_text(family = font),
axis.title = element_text(family = font, face = "bold"),
plot.title = element_text(family = font, face = "bold"),
legend.text = element_text(family = font),
legend.title = element_text(family = font, face = "bold"),
legend.position = "right") +
theme(axis.ticks = element_line(size = 1.5)) +
scale_y_continuous(labels = comma, breaks = seq(0, max(fenolic_long$value), by = 50000000))
ggplot(fenolic_long, aes(x = factor(name, levels = unique(name)), y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge", size = 1.5) +
labs(x = "Сompound", y = "Peak area, ion count",
fill = "Variable:") +
scale_fill_manual(values = c("leaves" = "green", "flowers" = "red")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, family = font, face = "bold"),
text = element_text(family = font),
axis.title = element_text(family = font, face = "bold"),
plot.title = element_text(family = font, face = "bold"),
legend.text = element_text(family = font),
legend.title = element_text(family = font, face = "bold"),
legend.position = "right",
axis.ticks = element_line(size = 1.5, color = "black", length = unit(1, "cm"))) +
scale_y_continuous(labels = comma, breaks = seq(0, max(fenolic_long$value), by = 50000000))
ggplot(fenolic_long, aes(x = factor(name, levels = unique(name)), y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge", size = 1.5) +
labs(x = "Сompound", y = "Peak area, ion count",
fill = "Variable:") +
scale_fill_manual(values = c("leaves" = "green", "flowers" = "red")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, family = font, face = "bold"),
text = element_text(family = font),
axis.title = element_text(family = font, face = "bold"),
plot.title = element_text(family = font, face = "bold"),
legend.text = element_text(family = font),
legend.title = element_text(family = font, face = "bold"),
legend.position = "right",
axis.ticks.x = element_line(size = 1.5, color = "black"),
axis.ticks.length = unit(0.5, "cm")) +
scale_y_continuous(labels = comma, breaks = seq(0, max(fenolic_long$value), by = 50000000))
ggplot(fenolic_long, aes(x = factor(name, levels = unique(name)), y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge", size = 1.5) +
labs(x = "Сompound", y = "Peak area, ion count",
fill = "Variable:") +
scale_fill_manual(values = c("leaves" = "green", "flowers" = "red")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, family = font, face = "bold"),
text = element_text(family = font),
axis.title = element_text(family = font, face = "bold"),
plot.title = element_text(family = font, face = "bold"),
legend.text = element_text(family = font),
legend.title = element_text(family = font, face = "bold"),
legend.position = "right",
axis.ticks.x = element_line(size = 1.5, color = "black"),
axis.ticks.length = unit(1, "cm")) +
scale_y_continuous(labels = comma, breaks = seq(0, max(fenolic_long$value), by = 50000000))
ggplot(fenolic_long, aes(x = factor(name, levels = unique(name)), y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge", size = 1.5) +
labs(x = "Сompound", y = "Peak area, ion count",
fill = "Variable:") +
scale_fill_manual(values = c("leaves" = "green", "flowers" = "red")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, family = font, face = "bold"),
text = element_text(family = font),
axis.title = element_text(family = font, face = "bold"),
plot.title = element_text(family = font, face = "bold"),
legend.text = element_text(family = font),
legend.title = element_text(family = font, face = "bold"),
legend.position = "right",
axis.ticks.x = element_line(size = 1.5, color = "black"),
axis.ticks.length = unit(10, "cm")) +
scale_y_continuous(labels = comma, breaks = seq(0, max(fenolic_long$value), by = 50000000))
ggplot(fenolic_long, aes(x = factor(name, levels = unique(name)), y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge", size = 1.5) +
labs(x = "Сompound", y = "Peak area, ion count",
fill = "Variable:") +
scale_fill_manual(values = c("leaves" = "green", "flowers" = "red")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, family = font, face = "bold"),
text = element_text(family = font),
axis.title = element_text(family = font, face = "bold"),
plot.title = element_text(family = font, face = "bold"),
legend.text = element_text(family = font),
legend.title = element_text(family = font, face = "bold"),
legend.position = "right") +
scale_y_continuous(labels = comma, breaks = seq(0, max(fenolic_long$value), by = 50000000))
ggplot(fenolic_long, aes(x = factor(name, levels = unique(name)), y = value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge", size = 1.5) +
labs(x = "Сompound", y = "Peak area, ion count",
fill = "Variable:") +
scale_fill_manual(values = c("leaves" = "green", "flowers" = "red")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, family = font, face = "bold"),
text = element_text(family = font),
axis.title = element_text(family = font, face = "bold"),
plot.title = element_text(family = font, face = "bold"),
legend.text = element_text(family = font),
legend.title = element_text(family = font, face = "bold"),
legend.position = "right") +
scale_y_continuous(labels = comma, breaks = seq(0, max(fenolic_long$value), by = 50000000))
# START -----------------------------------------------------------------------------------------------------------
Sys.setenv(LANG = "en_US.UTF-8")
#Library
library(pacman)
pacman::p_load(
lubridate,
purrr,
dplyr,
tidyr,
forecast,
zoo,
rlang,
ggplot2,
tidyverse,
raster,
sp,
geodata,
terra,
rasterVis,
BiocManager,
devtools,
dismo,
XML,
jsonlite,
rgdal,
rJava,
readxl,
rgbif,
leaflet
)
# Read all lists in file
file_path <- "E:/Eranthis/Eranthis_morph.xlsx"
all_sheets <- excel_sheets(file_path)
for (sheet_name in all_sheets) {
var_name <- make.names(sheet_name)
assign(var_name, read_excel(file_path, sheet = sheet_name))
}
source("E:/Eranthis/Analysis.R", echo=TRUE)
# START -----------------------------------------------------------------------------------------------------------
Sys.setenv(LANG = "en_US.UTF-8")
#Library
library(pacman)
pacman::p_load(
lubridate,
purrr,
dplyr,
tidyr,
forecast,
zoo,
rlang,
ggplot2,
tidyverse,
raster,
sp,
geodata,
terra,
rasterVis,
BiocManager,
devtools,
dismo,
XML,
jsonlite,
rgdal,
rJava,
readxl,
rgbif,
leaflet
)
# Read all lists in file
file_path <- "E:/Eranthis/Eranthis_morph.xlsx"
all_sheets <- excel_sheets(file_path)
for (sheet_name in all_sheets) {
var_name <- make.names(sheet_name)
assign(var_name, read_excel(file_path, sheet = sheet_name))
}
View(E.byunsanensis)
View(E.byunsanensis)
View(E..tanhoensis)
pacman::p_load(lubridate, purrr, dplyr, tidyr, forecast, zoo, rlang, ggplot2, tidyverse, raster,
sp, geodata, terra, rasterVis, BiocManager, devtools, dismo, XML, jsonlite, rgdal, rJava,
readxl, rgbif, leaflet, factoextra, NbClust, cluster
)
Eranthis <- bind_rows(all_sheets)
Eranthis <- <- bind_rows(all_sheets[[1]], all_sheets[[2]], ..., all_sheets[[12]])
Eranthis <- bind_rows(all_sheets[[1]], all_sheets[[2]], ..., all_sheets[[12]])
Eranthis <- bind_rows(all_sheets[[1]], all_sheets[[2]], all_sheets[[3]], all_sheets[[4]], all_sheets[[5]],
all_sheets[[6]], all_sheets[[7]], all_sheets[[8]], all_sheets[[9]], all_sheets[[10]],
all_sheets[[11]], all_sheets[[12]])
Eranthis <- bind_cols(all_sheets[[1]], all_sheets[[2]], all_sheets[[3]], all_sheets[[4]], all_sheets[[5]],
all_sheets[[6]], all_sheets[[7]], all_sheets[[8]], all_sheets[[9]], all_sheets[[10]],
all_sheets[[11]], all_sheets[[12]])
View(Eranthis)
View(E..albiflora)
list()
# START -----------------------------------------------------------------------------------------------------------
Sys.setenv(LANG = "en_US.UTF-8")
#Library
library(pacman)
pacman::p_load(lubridate, purrr, dplyr, tidyr, forecast, zoo, rlang, ggplot2, tidyverse, raster,
sp, geodata, terra, rasterVis, BiocManager, devtools, dismo, XML, jsonlite, rgdal, rJava,
readxl, rgbif, leaflet, factoextra, NbClust, cluster
)
# Read all lists in file
file_path <- "E:/Eranthis/Eranthis_morph.xlsx"
all_sheets <- excel_sheets(file_path)
for (sheet_name in all_sheets) {
var_name <- make.names(sheet_name)
assign(var_name, read_excel(file_path, sheet = sheet_name))
}
combined_data <- bind_rows(all_sheets)
combined_data <- bind_cols(all_sheets)
View(combined_data)
View(E.albiflora)
View(E.byunsanensis)
View(E.krasnoborovii)
combined_data <- do.call(bind_rows, all_sheets)
all_sheets <- list(all_sheets)
combined_data <- bind_rows(all_sheets)
combined_data <- do.call(bind_rows, all_sheets)
all_sheets <- excel_sheets(file_path)
all_sheets <- vector(all_sheets)
combined_data <- bind_rows(all_sheets)
all_are_data_frames <- all(sapply(all_sheets, is.data.frame))
if (all_are_data_frames) {
# Объединение таблиц в одну
combined_data <- bind_rows(all_sheets)
} else {
warning("Not all elements in the list are data frames.")
combined_data <- NULL  # или другая обработка ошибки по вашему усмотрению
}
all_sheets
all_dataframes <- list(E.sibirica, E.tanhoensis, E.sibirica_x_E.tanhoensis, E.krasnoborovii, E.sineli,
E.stellata, E.stellata(Korea), E.pinnatifida, E.pungdoensis, E.albiflora,
E.lobulata, E.byunsanensis)
all_dataframes <- list("E.sibirica", "E.tanhoensis", "E.sibirica_x_E.tanhoensis", "E.krasnoborovii", "E.sineli",
"E.stellata", "E.stellata(Korea)", "E.pinnatifida", "E.pungdoensis", "E.albiflora",
"E.lobulata", "E.byunsanensis")
combined_data <- bind_rows(all_dataframes)
combined_data <- bind_rows(lapply(all_dataframes, get))
all_dataframes <- list("E.sibirica", "E.tanhoensis", "E.sibirica_x_E.tanhoensis", "E.krasnoborovii", "E.sineli",
"E.stellata", "E.stellata.Korea.", "E.pinnatifida", "E.pungdoensis", "E.albiflora",
"E.lobulata", "E.byunsanensis")
combined_data <- bind_rows(lapply(all_dataframes, get))
tables <- lapply(all_dataframes, get)
# Преобразование типов данных всех столбцов к типу "character"
tables <- lapply(tables, function(tbl) mutate_all(tbl, as.character))
# Объединение таблиц в одну
combined_data <- bind_rows(tables)
View(combined_data)
View(combined_data)
# Выберем только нужные столбцы для кластеризации
data_for_clustering <- combined_data %>% select(Species, PHfl)
# Кластеризация методом k-средних (k-means)
kmeans_result <- kmeans(data_for_clustering, centers = 3)  # Укажите желаемое количество кластеров
# Выберем только нужные столбцы для кластеризации
data_for_clustering <- combined_data %>% select(Species, PHfl)
# Выберем только нужные столбцы для кластеризации
data_for_clustering <- combined_data %>% dplyr::select(Species, PHfl)
# Кластеризация методом k-средних (k-means)
kmeans_result <- kmeans(data_for_clustering, centers = 3)  # Укажите желаемое количество кластеров
View(data_for_clustering)
data_for_clustering <- na.omit(data_for_clustering)
# Кластеризация методом k-средних (k-means)
kmeans_result <- kmeans(data_for_clustering, centers = 3)  # Укажите желаемое количество кластеров
View(data_for_clustering)
# Кластеризация методом k-средних (k-means)
kmeans_result <- kmeans(data_for_clustering, centers = 3, na.action = na.exclude)  # Укажите желаемое количество кластеров
# Выберем только нужные столбцы для кластеризации
data_for_clustering <- combined_data %>% dplyr::select(Species, PHfl)
data_for_clustering <- data_for_clustering[complete.cases(data_for_clustering), ]
# Кластеризация методом k-средних (k-means)
kmeans_result <- kmeans(data_for_clustering, centers = 3, na.action = na.exclude)
# Кластеризация методом k-средних (k-means)
kmeans_result <- kmeans(data_for_clustering, centers = 3)
data_for_clustering$PHfl <- as.numeric(data_for_clustering$PHfl)
# Кластеризация методом k-средних (k-means)
kmeans_result <- kmeans(data_for_clustering, centers = 3)
# Выберем только нужные столбцы для кластеризации
data_for_clustering <- combined_data %>% dplyr::select(Species, PHfl)
data_for_clustering$PHfl <- as.numeric(data_for_clustering$PHfl)
data_for_clustering <- data_for_clustering[complete.cases(data_for_clustering), ]
# Кластеризация методом k-средних (k-means)
kmeans_result <- kmeans(data_for_clustering, centers = 3)
View(data_for_clustering)
# Выберем только нужные столбцы для кластеризации
data_for_clustering <- combined_data %>% dplyr::select(Species, PHfl)
data_for_clustering$PHfl <- as.numeric(data_for_clustering$PHfl)
data_for_clustering <- data_for_clustering[complete.cases(data_for_clustering), ]
# Кластеризация методом k-средних (k-means)
kmeans_result <- kmeans(data_for_clustering, centers = 3)
data_for_clustering$PHfl <- as.numeric(as.character(data_for_clustering$PHfl), na.rm = TRUE)
# Кластеризация методом k-средних (k-means)
kmeans_result <- kmeans(data_for_clustering, centers = 3)
hc <- hclust(combined_data, method = "ward.D2")
hc <- hclust(combined_data, method = "ward.D2", is.na = TRUE)
data_for_clustering <- combined_data %>% select(Species, PHfl)
data_for_clustering <- combined_data %>% dplyr::select(Species, PHfl)
# Create a distance matrix
dist_matrix <- dist(data_for_clustering)
# Perform hierarchical clustering
hc <- hclust(dist_matrix, method = "ward.D2")
# Create a distance matrix
data_for_clustering <- impute(data_for_clustering, fun = mean)
pacman::p_load(lubridate, purrr, dplyr, tidyr, forecast, zoo, rlang, ggplot2, tidyverse, raster,
sp, geodata, terra, rasterVis, BiocManager, devtools, dismo, XML, jsonlite, rgdal, rJava,
readxl, rgbif, leaflet, factoextra, NbClust, cluster, Hmisc
)
# Create a distance matrix
data_for_clustering <- impute(data_for_clustering, fun = mean)
# Create a distance matrix
preProcessModel <- preProcess(data_for_clustering, method = c("medianImpute", "YeoJohnson"))
pacman::p_load(lubridate, purrr, dplyr, tidyr, forecast, zoo, rlang, ggplot2, tidyverse, raster,
sp, geodata, terra, rasterVis, BiocManager, devtools, dismo, XML, jsonlite, rgdal, rJava,
readxl, rgbif, leaflet, factoextra, NbClust, cluster, Hmisc, caret
)
# Create a distance matrix
preProcessModel <- preProcess(data_for_clustering, method = c("medianImpute", "YeoJohnson"))
imputed_data <- predict(preProcessModel, data_for_clustering)
dist_matrix <- dist(data_for_clustering)
# Perform hierarchical clustering
hc <- hclust(dist_matrix, method = "ward.D2")
pacman::p_load(lubridate, purrr, dplyr, tidyr, forecast, zoo, rlang, ggplot2, tidyverse, raster,
sp, geodata, terra, rasterVis, BiocManager, devtools, dismo, XML, jsonlite, rgdal, rJava,
readxl, rgbif, leaflet, factoextra, NbClust, cluster, Hmisc, caret, mice
)
imputed_data <- mice(data_for_clustering, method = "pmm", m = 5, maxit = 50)
data_for_clustering <- na.omit(data_for_clustering)
# Create a distance matrix
dist_matrix <- dist(imputed_data)
# Perform hierarchical clustering
hc <- hclust(dist_matrix, method = "ward.D2")
pacman::p_load(lubridate, purrr, dplyr, tidyr, forecast, zoo, rlang, ggplot2, tidyverse, raster,
sp, geodata, terra, rasterVis, BiocManager, devtools, dismo, XML, jsonlite, rgdal, rJava,
readxl, rgbif, leaflet, factoextra, NbClust, cluster, Hmisc, caret, mice, missForest
)
imputed_data <- missForest(data_for_clustering)$ximp
imputed_data <- missForest(data_for_clustering)$PHfl
data_for_clustering$PHfl <- as.numeric(data_for_clustering$PHfl)
imputed_data <- missForest(data_for_clustering)$PHfl
View(data_for_clustering)
data_for_clustering <- combined_data %>% dplyr::select(Species, PHfl)
data_for_clustering$PHfl <- as.numeric(data_for_clustering$PHfl)
imputed_data <- missForest(data_for_clustering)$PHfl
